!function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","khoaijs","khoaijs-event-emitter","khoaijs-pre-options","khoaijs-template"];define(n,function(n,i,o,s,a){var l=e(n,i,o,s,a);return i.DialogButton=l,t.DialogButton=l,l})}else{var i=e(t._,t.Khoai,t.Khoai.EventEmitter||t.EventEmitter,t.Khoai.PreOptions||t.PreOptions,t.Khoai.Template||t.Template);t.Khoai.DialogButton=i,t.DialogButton=i}}(this,function(t,e,n,i,o){function s(t){return t.isVisible()&&t.isEnable()&&t.getDialog().isClickable()}function a(t){t.addListener("listen",l),t.addListener("unlisten",r),t.addListener("dialog.toggle_enable",u),t.addListener("dialog.toggle_pending",p)}function l(t){_[this.id].dialog=t}function r(t){_[this.id].dialog=null}function u(t){this.toggleEnable(t.data)}function p(t){t.data?this.options.disable_on_pending&&this.toggleEnable(!1):this.toggleEnable(!0)}function c(t){this.type_prefix="dialog_button",n.call(this),this.options=i.get(h.PRE_OPTIONS_NAME,{name:this.id}),_[this.id]={dialog:null,enabled:!0,visible:!0,template_instance:null},this.option(this.options),t&&(t.hasOwnProperty("events")&&(this.addListeners(t.events),delete t.events),this.option(t)),a(this)}var h={PRE_OPTIONS_NAME:"Khoai.DialogButton",TEMPLATE_TYPE:"DialogButton",TYPE_INFO:"info",TYPE_PRIMARY:"primary",TYPE_SUCCESS:"success",TYPE_WARNING:"warning",TYPE_DANGER:"danger",OK:"ok",CANCEL:"cancel",YES:"yes",NO:"no",RETRY:"retry",BUTTONS_OK_ONLY:["ok"],BUTTONS_OK_CANCEL:["ok","cancel"],BUTTONS_YES_NO:["yes","no"],BUTTONS_YES_NO_CANCEL:["yes","no","cancel"],BUTTONS_RETRY_CANCEL:["retry","cancel"]},_={};i.define(h.PRE_OPTIONS_NAME,{label:"Untitled",icon:"",type:h.TYPE_INFO,size:1,handler:null,disable_on_pending:!0,clickable:s,template_name:"",template:{}}),e.util.inherit(c,n),e.util.defineConstant(c,"version","0.0.1"),e.util.defineConstant(c,h),c.globalOption=function(t){i.update(c.PRE_OPTIONS_NAME,t)},c.prototype.setTemplate=function(t){if(!(t instanceof o))throw new Error("Invalid Template instance");_[this.id].template_instance&&(_[this.id].template_instance.disconnect(),_[this.id].template_instance=null),t.option(this.options.template),_[this.id].template_instance=t,t.connect(this)},c.prototype.getTemplate=function(){if(!_[this.id].template_instance){if(!this.options.template_name){var t=i.get(c.PRE_OPTIONS_NAME);if(t.template_name&&o.hasTemplate(c.TEMPLATE_TYPE,t.template_name))this.options.template_name=t.template_name;else{var e=o.defaultTemplate(c.TEMPLATE_TYPE);if(!1===e)throw new Error("Dialog button default template not found");this.options.template_name=e,i.update(c.PRE_OPTIONS_NAME,{template_name:e})}}this.setTemplate(o.templateInstance(c.TEMPLATE_TYPE,this.options.template_name))}return _[this.id].template_instance},c.prototype.option=function(n,i){var s=e.util.beObject.apply(e,t.toArray(arguments));return s.template_name&&this.setTemplate(o.templateInstance(c.TEMPLATE_TYPE,s.template_name)),s.template&&this.getTemplate().option(s.template),t.extend(this.options,t.omit(s,["template_name"])),this},c.prototype.setHandler=function(t){this.option("handler",t)},c.prototype.getDialog=function(){return!!_[this.id].dialog&&_[this.id].dialog},c.prototype.isClickable=function(){return t.isFunction(this.options.clickable)?this.options.clickable.call(this,this):Boolean(this.options.clickable)},c.prototype.isVisible=function(){return Boolean(_[this.id].visible)},c.prototype.isEnable=function(){return Boolean(_[this.id].enabled)},c.prototype.click=function(){return!!this.isClickable()&&(this.emitEvent("click"),this.options.handler&&e.util.callFunc(this.options.handler,this,this),this.emitEvent("clicked"),!0)},c.prototype.toggle=function(e){t.isUndefined(e)&&(e=!_[this.id].visible),_[this.id].visible!==e&&(_[this.id].visible=e,e?this.emitEvent("show"):this.emitEvent("hide"),this.emitEvent("toggle",e))},c.prototype.show=function(){this.toggle(!0)},c.prototype.hide=function(){this.toggle(!1)},c.prototype.toggleEnable=function(e){t.isUndefined(e)&&(e=!_[this.id].enabled),_[this.id].enabled!==e&&(_[this.id].enabled=e,this.emitEvent(e?"enabled":"disabled"),this.emitEvent("toggle_enable",e))},c.prototype.disable=function(){this.toggleEnable(!1)},c.prototype.enable=function(){this.toggleEnable(!0)},c.prototype.render=function(){return this.getTemplate().render()},c.prototype.reDraw=function(){return!!_[this.id].template_instance&&_[this.id].template_instance.reDraw()},c.prototype.getDOM=function(){return!!(_[this.id].template_instance&&_[this.id].template_instance instanceof o)&&_[this.id].template_instance.getDOM()},c.prototype.getOtherButton=function(t){return this.getDialog().getButton(t)},c.prototype.getCloseKey=function(){return this.options.name},c.prototype.closeDialog=function(t){var e=this.getDialog();return!!e&&(e.close(t,this.getCloseKey()),!0)},c.prototype.wasCloseDialog=function(){var t=this.getDialog();return!!t&&t.setClosedBy(this)};var d={};return c.isDefined=function(t){return d.hasOwnProperty(t)},c.define=function(e,n,i){d[e]={options:t.isObject(n)?n:{},freeze_options:t.isObject(i)?i:{}},d[e].freeze_options.name=e},c.updateOptions=function(e,n){return!!c.isDefined(e)&&(t.extend(d[e].options,n),!0)},c.factory=function(e,n,i){t.isObject(n)||(n={}),t.isObject(i)||(i={});var o=t.castArray(e).map(function(e){var o,s;if(!c.isDefined(e))throw new Error("Dialog Button type is unregistered");return s=d[e],o=t.extend({},s.options,t.clone(n),i.hasOwnProperty(e)?i[e]:{},s.freeze_options),new c(o)});return 1===o.length?o.shift():o},c.defaultClickable=s,t.each(["Ok","Yes","No","Retry","Ignore"],function(t){c.define(t.toLowerCase(),{label:t})}),c.define("cancel",{label:"Cancel",disable_on_pending:!1}),function(){function t(t){t.getDialog()&&t.closeDialog(Boolean(t.options.force))}e.util.defineConstant(c,{CLOSE:"close"}),c.define(c.CLOSE,{label:"Close",type:c.TYPE_INFO,force:!1},{handler:t})}(),c}),function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","jquery","khoaijs","khoaijs-event-emitter","khoaijs-pre-options","khoaijs-template","dialog_button"];define(n,function(n,i,o,s,a,l,r){var u=e(n,i,o,s,a,l,r);return o.Dialog=u,t.Dialog=u,u})}else{var i=e(t._,t.jQuery,t.Khoai,t.Khoai&&t.Khoai.EventEmitter||t.EventEmitter,t.Khoai&&t.Khoai.PreOptions||t.PreOptions,t.Khoai&&t.Khoai.Template||t.Template,t.Khoai&&t.Khoai.DialogButton||t.DialogButton);t.Khoai.Dialog=i,t.Dialog=i}}(this,function(t,e,n,i,o,s,a){function l(t){return t.isEnable()}function r(t){return t.isEnable()}function u(t){var e={status:h.STATUS_INITIAL,enabled:!0,pending:!1,loading:!1,ajax_worker:null,template_instance:null};_.hasOwnProperty(t)&&(e.template_instance=_[t].template_instance),_[t]=e}function p(e){if(this.type_prefix="dialog",i.call(this),this.options=o.get(h.PRE_OPTIONS_NAME),this.closed_by="",this.data={},this.buttons={},u(this.id),this.option(this.options),e){if(e.hasOwnProperty("events")&&e.events&&(this.addListeners(e.events),delete e.events),e.hasOwnProperty("buttons")&&e.buttons){var n=this;t.each(e.buttons,function(t){n.attachButton(t)}),e.buttons=null,delete e.buttons}this.option(e)}}function c(e){t.isFunction(this.options.content_handler)&&(e=this.options.content_handler(e,this)),this.emitEvent("content_loaded",e),this.updateContent(e)}var h={PRE_OPTIONS_NAME:"Khoai.Dialog",TEMPLATE_TYPE:"Dialog",STATUS_INITIAL:"initial",STATUS_OPENED:"opened",STATUS_HIDING:"hiding",STATUS_CLOSED:"removed",TYPE_INFO:"info",TYPE_SUCCESS:"success",TYPE_PRIMARY:"primary",TYPE_WARNING:"warning",TYPE_DANGER:"danger",SIZE_SMALL:"small",SIZE_NORMAL:"normal",SIZE_LARGE:"large"},_={};return o.define(h.PRE_OPTIONS_NAME,{title:"Dialog",type:h.TYPE_INFO,content:"",content_handler:null,template_name:"",template:{},size:h.SIZE_NORMAL,classes:"",closable:l,clickable:r}),n.util.inherit(p,i),n.util.defineConstant(p,"version","0.0.1"),n.util.defineConstant(p,h),p.globalOption=function(t){o.update(p.PRE_OPTIONS_NAME,t)},p.prototype.getContent=function(){return t.isFunction(this.options.content)&&(this.emitEvent("load_content"),this.options.content=this.options.content(c.bind(this),this)),t.isFunction(this.options.content_handler)?this.options.content_handler(this.options.content,this):this.options.content},p.prototype.updateContent=function(t){this.options.content=t,this.isOpened()&&this.emitEvent("update_content",t)},p.prototype.setTemplate=function(t){if(!this.isIniting())throw new Error("Dialog is opened");if(!(t instanceof s))throw new Error("Invalid Template instance");_[this.id].template_instance&&(_[this.id].template_instance.disconnect(),_[this.id].template_instance=null),t.option(this.options.template),_[this.id].template_instance=t,t.connect(this)},p.prototype.getTemplate=function(){if(!_[this.id].template_instance){if(!this.options.template_name){var t=o.get(p.PRE_OPTIONS_NAME);if(t.template_name&&s.hasTemplate(p.TEMPLATE_TYPE,t.template_name))this.options.template_name=t.template_name;else{var e=s.defaultTemplate(p.TEMPLATE_TYPE);if(!1===e)throw new Error("Dialog default template not found");this.options.template_name=e,o.update(p.PRE_OPTIONS_NAME,{template_name:e})}}this.setTemplate(s.templateInstance(p.TEMPLATE_TYPE,this.options.template_name))}return _[this.id].template_instance},p.prototype.option=function(e,i){var o=n.util.beObject.apply(n,t.toArray(arguments));return o.template_name&&this.setTemplate(s.templateInstance(p.TEMPLATE_TYPE,o.template_name)),o.template&&this.getTemplate().option(o.template),t.extend(this.options,o),this},p.prototype.status=function(){return!!_.hasOwnProperty(this.id)&&_[this.id].status},p.prototype.isIniting=function(){return this.status()===p.STATUS_INITIAL},p.prototype.isOpened=function(){return-1!==[p.STATUS_OPENED,p.STATUS_HIDING].indexOf(this.status())},p.prototype.isVisibling=function(){return this.status()===p.STATUS_OPENED},p.prototype.isHiding=function(){return this.status()===p.STATUS_HIDING},p.prototype.isClosed=function(){return this.status()===p.STATUS_CLOSED},p.prototype.isEnable=function(){return Boolean(_[this.id].enabled)},p.prototype.isPending=function(){return Boolean(_[this.id].pending)},p.prototype.enable=function(){return!this.isEnable()&&(_[this.id].enabled=!0,this.emitEvent("enabled"),this.emitEvent("toggle_enable",!0),!0)},p.prototype.disable=function(){return!!this.isEnable()&&(_[this.id].enabled=!1,this.emitEvent("disabled"),this.emitEvent("toggle_enable",!1),!0)},p.prototype.pending=function(){return!this.isPending()&&(_[this.id].pending=!0,this.emitEvent("pending"),this.emitEvent("toggle_pending",!0),!0)},p.prototype.resolved=function(){return!!this.isPending()&&(_[this.id].pending=!1,this.emitEvent("resolved"),this.emitEvent("toggle_pending",!1),!0)},p.prototype.attachButton=function(e){if(!(e instanceof a))if(t.isObject(e))e=new a(e);else{if(!t.isString(e)&&!t.isNumber(e)||!a.has(e))throw new Error("Invalid button");e=a.factory(e)}return this.buttons[e.options.name]=e,e.listen(this),e},p.prototype.attachMultiButtons=function(e){var n=this;t.each(e,function(t){n.attachButton(t)})},p.prototype.hasButton=function(t){return this.buttons.hasOwnProperty(t)},p.prototype.getButton=function(t){if(!this.hasButton(t))throw new Error("Get unattached button");return this.buttons[t]},p.prototype.removeButton=function(t){if(!this.hasButton(t))throw new Error("Remove unattached button");this.buttons[t].unlisten(this),delete this.buttons[t]},p.prototype.isClickable=function(){return!this.options.clickable||(t.isFunction(this.options.clickable)?this.options.clickable(this):Boolean(this.options.clickable))},p.prototype.click=function(t){if(this.isClickable()&&this.hasButton(t)){this.getButton(t).click(),this.emitEvent("clicked",t)}return!1},p.prototype.isCloseable=function(){return!!this.isOpened()&&(!this.options.closable||(t.isFunction(this.options.closable)?this.options.closable(this):Boolean(this.options.closable)))},p.prototype.open=function(){return this.status()===p.STATUS_INITIAL&&(_[this.id].template_instance||this.getTemplate(),this.closed_by="",_[this.id].status=p.STATUS_OPENED,this.emitEvent("open"),!0)},p.prototype.hide=function(){return!!this.isVisibling()&&(this.emitEvent("hide"),_[this.id].status=p.STATUS_HIDING,!0)},p.prototype.show=function(){return!!this.isHiding()&&(this.emitEvent("show"),_[this.id].status=p.STATUS_OPENED,!0)},p.prototype.close=function(t,e){return!(this.isClosed()||!t&&!this.isCloseable())&&(e=e||"",this.emitEvent("close",t,e),u(this.id),_[this.id].status=p.STATUS_CLOSED,this.closed_by=e,this.emitEvent("closed",t,e),this.reset(),!0)},p.prototype.setClosedBy=function(e){return!!this.isClosed()&&(e||(e=""),e instanceof a&&(e=e.getCloseKey()),t.isString(e)||(e+=""),this.closed_by=e,!0)},p.prototype.isClosedBy=function(e){return!!this.isClosed()&&(e||(e=""),e instanceof a&&(e=e.getCloseKey()),t.isString(e)||(e+=""),this.closed_by===e)},p.prototype.getDOM=function(){return!!(_[this.id].template_instance&&_[this.id].template_instance instanceof s)&&_[this.id].template_instance.getDOM()},p}),function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","jquery","khoaijs","khoaijs-pre-options","khoaijs-ajax","../dialog-button","../dialog"];require(n,e)}else e(t._,t.jQuery||t.$,t.Khoai,t.Khoai&&t.Khoai.PreOptions||t.PreOptions,t.Khoai&&t.Khoai.Ajax||t.Ajax,t.Khoai&&t.Khoai.DialogButton||t.DialogButton,t.Khoai&&t.Khoai.Dialog||t.Dialog)}(this,function(t,e,n,i,o,s,a){function l(t){return function(e){var i=e.getDialog();e.closeDialog(!0),n.util.callFunc(t,[e.options.name,null,e,i],i)}}function r(i,o){return function(s){var a=this.getDialog(),l=e(a.data.form_selector),r=!0;if(c(a,!1),o.validator&&(r=o.validator(l,a)),!0!==r)return void(t.isString(r)&&c(a,r));n.util.callFunc(i,[s.options.name,l,s,a],a)}}function u(t){return['<form><div class="dialog_form_message"></div>',t,'<input type="submit" style="display: none;"/></form>'].join("")}function p(e){return t.isArray(e)||(e+"").split(" "),e=t.flatten(t.castArray(e)),t.isEmpty(e)?"":t.map(e,function(t){return t.trim()?"."+t:""}).join("")}function c(t,n){var i=e(t.data.form_selector+" "+t.data.form_message_selector);i.length&&(n?i.html(n).show():i.html("").hide())}function h(t,e){var n="#"+t.getTemplate().getDOMID(),i=n+" form"+p(e.form_classes),o=i+" "+e.message_classes?p(e.message_classes):".dialog_form_message";t.data.form_selector=i,t.data.form_message_selector=o}function _(t){t.getFormDOM=function(){return e(t.data.form_selector)},t.updateFormMessage=function(e){c(t,e)},t.clearFormMessage=function(){c(t,!1)},t.getFormData=function(){return n.jForm?n.jForm.getFormData(this.getFormDOM()):(console.warn("Method getFormData require module jForm"),{})}}function d(t,n){function i(e){return e.preventDefault(),n.submit_button_name&&t.click(n.submit_button_name),!1}t.on("open",function(){e("body").on("submit",this.data.form_selector,i)}),t.on("closed",function(){if(!this.closed_by&&n.cancel_button_name){if(!this.hasButton(n.cancel_button_name))throw new Error("Invalid default button");this.buttons[n.cancel_button_name].click()}},{key:"default_close_button"}),t.on("closed",function(){e("body").off("submit",this.data.form_selector,i)})}n.util.defineConstant(a,{DYNAMIC_CONTENT_PRE_OPTIONS_NAME:"Khoai.Dialog.DynamicContent"}),i.define(a.DYNAMIC_CONTENT_PRE_OPTIONS_NAME,{loading:"Loading content..."}),a.dynamicContent=function(e){var n=null;return t.isString(e)&&(e={url:e}),e=i.get(a.DYNAMIC_CONTENT_PRE_OPTIONS_NAME,e),function(i,s){if(!t.isNull(n))return n;var a=new o(t.omit(e,"loading"));return a.done(function(t){n=t+"",i(n)}),a.fail(function(){s.emitEvent("load_content_failed"),i(e.error_content||"Get dynamic content failed")}),a.option("before_send",function(){return s.emitEvent("load_content"),s.pending(),!0}),a.always(function(){s.emitEvent("load_content_complete"),s.resolved()}),s.addListener("close",function(){a.abort()}),a.request(),e.loading}},a.box=function(e,n){n=n||{},t.isString(n)&&(n={title:n+""}),n.content=e,n.template||(n.template={}),n.template=t.defaults(n.template,{has_footer:!1,has_header:!1,close_manual:!1});var i=new a(n);return i.open(),i},n.util.defineConstant(a,{DIALOG_ALERT_PRE_OPTIONS_NAME:"Khoai.Dialog.Alert"}),i.define(a.DIALOG_ALERT_PRE_OPTIONS_NAME,{title:"Alert",close_button_options:{}}),a.alert=function(e,n){t.isString(n)&&(n={title:n+""}),n=t.extend({title:"Alert"},i.get(a.DIALOG_ALERT_PRE_OPTIONS_NAME,n),{content:e});var o=new a(t.omit(n,"close_button_options"));return o.attachButton(s.factory(s.CLOSE,n.close_button_options)),o.open(),o},n.util.defineConstant(a,{DIALOG_CONFIRM_PRE_OPTIONS_NAME:"Khoai.Dialog.Confirm"}),i.define(a.DIALOG_CONFIRM_PRE_OPTIONS_NAME,{title:"Confirm",default_button:null,buttons:[]}),a.confirm=function(e,o,l){var r;return t.isObject(l)||(l={title:l+""}),t.isFunction(o)||(o=t.noop),l=t.extend(i.get(a.DIALOG_CONFIRM_PRE_OPTIONS_NAME,l),{content:e}),t.isEmpty(l.buttons)&&(l.buttons=s.factory(s.BUTTONS_YES_NO)),r=new a(t.omit(l,"default_button")),t.each(r.buttons,function(t){t.setHandler(function(){this.closeDialog(),o(this.options.name)})}),l.default_button||(l.default_button=t.last(Object.keys(r.buttons))),r.on("closed",function(){this.closed_by||n.util.callFunc(o,l.default_button,null)},{key:"default_button"}),r.open(),r},n.util.defineConstant(a,{DIALOG_IFRAME_PRE_OPTIONS_NAME:"Khoai.Dialog.iFrame"}),i.define(a.DIALOG_IFRAME_PRE_OPTIONS_NAME,{title:"iFrame",attributes:{}}),a.iFrame=function(e,n){var o,s=[],l=[];return t.isObject(n)||(n={title:n+""}),n=i.get(a.DIALOG_IFRAME_PRE_OPTIONS_NAME,n),t.each(n.attributes,function(e,n){t.isBoolean(e)?e&&s.push(n+'="'+n+'"'):s.push(n+'="'+e+'"')}),l.push('<div class="embed-responsive embed-responsive-16by9">'),l.push('<iframe class="embed-responsive-item" src="'+e+'" '+s.join(" ")+"></iframe>"),l.push("</div>"),n.content=l.join("\n"),o=new a(n),o.open(),o},s.define("submit",{label:"Submit"}),n.util.defineConstant(s,{SUBMIT:"submit",SUBMIT_CANCEL:["submit","cancel"]}),n.util.defineConstant(a,{DIALOG_FORM_PRE_OPTIONS_NAME:"Khoai.Dialog.Form"}),i.define(a.DIALOG_FORM_PRE_OPTIONS_NAME,{title:"Form",form_classes:"",message_classes:"dialog_form_message",validator:null,auto_focus:!0,submit_button_name:"submit",cancel_button_name:"cancel",buttons:[],buttons_extend_options:{}}),a.form=function(e,n,o){var p=new a;return t.isFunction(n)||(n=t.noop),o=t.extend(i.get(a.DIALOG_FORM_PRE_OPTIONS_NAME,o),{content:e,content_handler:u}),t.isEmpty(o.buttons)&&(o.buttons=s.factory(s.SUBMIT_CANCEL,{},{cancel:{handler:l(n)},submit:{handler:r(n,o)}})),p.option(t.omit(o,["form_classes","message_classes","validator","submit_button_name","cancel_button_name","buttons","buttons_extend_options"])),t.each(o.buttons,function(e){var n=p.attachButton(e);o.buttons_extend_options.hasOwnProperty(n.options.name)&&n.option(t.clone(o.buttons_extend_options[n.options.name]))}),h(p,o),_(p),d(p,o),p.open(),o.auto_focus&&setTimeout(function(){p.getDOM().find("input:visible, textarea:visible").first().focus()},500),p},n.util.defineConstant(a,{DIALOG_PROMPT_PRE_OPTIONS_NAME:"Khoai.Dialog.prompt"}),i.define(a.DIALOG_PROMPT_PRE_OPTIONS_NAME,{title:"Prompt",default_value:"",placeholder:"",input_type:"text",input_classes:"form-control",buttons_extend_options:{submit:{label:"Ok"}}}),a.prompt=function(e,n,o){function s(t,e,i){if(!e)return void n(!1);var s=o.default_value;"submit"===t&&(s=e.find('input[name="prompt_data"]').val(),i.closeDialog()),n(s)}var l=[];return t.isObject(o)||(o={title:o+""}),t.isFunction(n)||(n=t.noop),o=i.get(a.DIALOG_PROMPT_PRE_OPTIONS_NAME,o),l.push("<p>",e,"</p>"),l.push('<input name="prompt_data" type="',o.input_type+'" ','class="',o.input_classes+'" ','value="',o.default_value+'"','placeholder="',o.placeholder+'"',"/>"),a.form(l.join(""),s,t.omit(o,"default_value","placeholder","input_type","input_classes"))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy5taW4uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJkZXBlbmRlbmNpZXMiLCJfIiwiS2hvYWkiLCJFdmVudEVtaXR0ZXIiLCJQcmVPcHRpb25zIiwiVGVtcGxhdGUiLCJtb2R1bGUiLCJEaWFsb2dCdXR0b24iLCJ0aGlzIiwiX2RlZmF1bHRfY2xpY2thYmxlX2NiIiwiYnV0dG9uIiwiaXNWaXNpYmxlIiwiaXNFbmFibGUiLCJnZXREaWFsb2ciLCJpc0NsaWNrYWJsZSIsIl9pbml0X2J0biIsImluc3RhbmNlIiwiYWRkTGlzdGVuZXIiLCJfYnRuX2V2ZW50X2F0dGFjaGVkIiwiX2J0bl9ldmVudF9kZXRhY2hlZCIsIl9idG5fZXZlbnRfZGlhbG9nX3RvZ2dsZV9lbmFibGUiLCJfYnRuX2V2ZW50X2RpYWxvZ190b2dnbGVfcGVuZGluZyIsImRpYWxvZyIsIl9idXR0b25zIiwiaWQiLCJub3RpY2VfZGF0YSIsInRvZ2dsZUVuYWJsZSIsImRhdGEiLCJvcHRpb25zIiwiZGlzYWJsZV9vbl9wZW5kaW5nIiwib3B0aW9uIiwidHlwZV9wcmVmaXgiLCJjYWxsIiwiZ2V0IiwiY29uc3RhbnQiLCJQUkVfT1BUSU9OU19OQU1FIiwibmFtZSIsImVuYWJsZWQiLCJ2aXNpYmxlIiwidGVtcGxhdGVfaW5zdGFuY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImFkZExpc3RlbmVycyIsImV2ZW50cyIsIlRFTVBMQVRFX1RZUEUiLCJUWVBFX0lORk8iLCJUWVBFX1BSSU1BUlkiLCJUWVBFX1NVQ0NFU1MiLCJUWVBFX1dBUk5JTkciLCJUWVBFX0RBTkdFUiIsIk9LIiwiQ0FOQ0VMIiwiWUVTIiwiTk8iLCJSRVRSWSIsIkJVVFRPTlNfT0tfT05MWSIsIkJVVFRPTlNfT0tfQ0FOQ0VMIiwiQlVUVE9OU19ZRVNfTk8iLCJCVVRUT05TX1lFU19OT19DQU5DRUwiLCJCVVRUT05TX1JFVFJZX0NBTkNFTCIsImxhYmVsIiwiaWNvbiIsInR5cGUiLCJzaXplIiwiaGFuZGxlciIsImNsaWNrYWJsZSIsInRlbXBsYXRlX25hbWUiLCJ0ZW1wbGF0ZSIsInV0aWwiLCJpbmhlcml0IiwiZGVmaW5lQ29uc3RhbnQiLCJnbG9iYWxPcHRpb24iLCJ1cGRhdGUiLCJwcm90b3R5cGUiLCJzZXRUZW1wbGF0ZSIsIkVycm9yIiwiZGlzY29ubmVjdCIsImNvbm5lY3QiLCJnZXRUZW1wbGF0ZSIsImRlZmF1bHRfb3B0aW9ucyIsImhhc1RlbXBsYXRlIiwiZGVmYXVsdF90ZW1wbGF0ZSIsImRlZmF1bHRUZW1wbGF0ZSIsInRlbXBsYXRlSW5zdGFuY2UiLCJ2YWx1ZSIsImJlT2JqZWN0IiwiYXBwbHkiLCJ0b0FycmF5IiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwib21pdCIsInNldEhhbmRsZXIiLCJjYWxsYmFjayIsImlzRnVuY3Rpb24iLCJCb29sZWFuIiwiY2xpY2siLCJlbWl0RXZlbnQiLCJjYWxsRnVuYyIsInRvZ2dsZSIsInNob3ciLCJpc1VuZGVmaW5lZCIsImhpZGUiLCJpc19lbmFibGUiLCJkaXNhYmxlIiwiZW5hYmxlIiwicmVuZGVyIiwicmVEcmF3IiwiZ2V0RE9NIiwiZ2V0T3RoZXJCdXR0b24iLCJnZXRCdXR0b24iLCJnZXRDbG9zZUtleSIsImNsb3NlRGlhbG9nIiwiZm9yY2UiLCJjbG9zZSIsIndhc0Nsb3NlRGlhbG9nIiwic2V0Q2xvc2VkQnkiLCJidXR0b25fcHJlX29wdGlvbnMiLCJpc0RlZmluZWQiLCJmcmVlemVfb3B0aW9ucyIsImlzT2JqZWN0IiwidXBkYXRlT3B0aW9ucyIsInR5cGVzIiwiYWxsX2J1dHRvbl9vcHRpb25zIiwiYnV0dG9uX29wdGlvbnMiLCJidXR0b25zIiwiY2FzdEFycmF5IiwibWFwIiwidHlwZV9vcHRpb25zIiwiY2xvbmUiLCJsZW5ndGgiLCJzaGlmdCIsImRlZmF1bHRDbGlja2FibGUiLCJlYWNoIiwidG9Mb3dlckNhc2UiLCJfY2xvc2VfZGlhbG9nX2hhbmRsZXIiLCJDTE9TRSIsImpRdWVyeSIsIkRpYWxvZyIsIl9kZWZhdWx0X2Nsb3NhYmxlX2Z1bmMiLCJkaWFsb2dfaW5zdGFuY2UiLCJfZGVmYXVsdF9jbGlja2FibGVfZnVuYyIsInJlc2V0RGlhbG9nIiwic3RhdHVzIiwiU1RBVFVTX0lOSVRJQUwiLCJwZW5kaW5nIiwibG9hZGluZyIsImFqYXhfd29ya2VyIiwiX2RpYWxvZ3MiLCJjbG9zZWRfYnkiLCJzZWxmIiwiYXR0YWNoQnV0dG9uIiwidXBkYXRlRGlhbG9nQ29udGVudENhbGxiYWNrIiwiY29udGVudCIsImNvbnRlbnRfaGFuZGxlciIsInVwZGF0ZUNvbnRlbnQiLCJTVEFUVVNfT1BFTkVEIiwiU1RBVFVTX0hJRElORyIsIlNUQVRVU19DTE9TRUQiLCJTSVpFX1NNQUxMIiwiU0laRV9OT1JNQUwiLCJTSVpFX0xBUkdFIiwidGl0bGUiLCJjbGFzc2VzIiwiY2xvc2FibGUiLCJnZXRDb250ZW50IiwiYmluZCIsIm5ld19jb250ZW50IiwiaXNPcGVuZWQiLCJpc0luaXRpbmciLCJpbmRleE9mIiwiaXNWaXNpYmxpbmciLCJpc0hpZGluZyIsImlzQ2xvc2VkIiwiaXNQZW5kaW5nIiwicmVzb2x2ZWQiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaGFzIiwibGlzdGVuIiwiYXR0YWNoTXVsdGlCdXR0b25zIiwiaGFzQnV0dG9uIiwicmVtb3ZlQnV0dG9uIiwidW5saXN0ZW4iLCJidXR0b25fbmFtZSIsImlzQ2xvc2VhYmxlIiwib3BlbiIsImJ5IiwicmVzZXQiLCJpc0Nsb3NlZEJ5IiwicmVxdWlyZSIsIiQiLCJBamF4IiwiY3JlYXRlQ2FuY2VsQnV0dG9uSGFuZGxlciIsImNyZWF0ZUJ1dHRvbnNIYW5kbGVyIiwiZm9ybSIsInZhbGlkYXRlX3Jlc3VsdCIsInVwZGF0ZUZvcm1NZXNzYWdlIiwidmFsaWRhdG9yIiwiZGlhbG9nRm9ybUNvbnRlbnRIYW5kbGVyIiwiam9pbiIsImNsYXNzZXNUb1NlbGVjdG9yIiwiaXNBcnJheSIsInNwbGl0IiwiZmxhdHRlbiIsImlzRW1wdHkiLCJjbGFzc19uYW1lIiwidHJpbSIsIm1lc3NhZ2UiLCJtZXNzYWdlX2RvbSIsImh0bWwiLCJhZGREaWFsb2dEYXRhIiwiZGlhbG9nX2RvbV9pZCIsImdldERPTUlEIiwiZm9ybV9zZWxlY3RvciIsImZvcm1fY2xhc3NlcyIsImZvcm1fbWVzc2FnZV9zZWxlY3RvciIsIm1lc3NhZ2VfY2xhc3NlcyIsImFkZERpYWxvZ01ldGhvZHMiLCJnZXRGb3JtRE9NIiwiY2xlYXJGb3JtTWVzc2FnZSIsImdldEZvcm1EYXRhIiwiakZvcm0iLCJjb25zb2xlIiwid2FybiIsImFkZERpYWxvZ0V2ZW50cyIsImZvcm1fc3VibWl0X2V2ZW50X2xpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN1Ym1pdF9idXR0b25fbmFtZSIsIm9uIiwiY2FuY2VsX2J1dHRvbl9uYW1lIiwia2V5Iiwib2ZmIiwiRFlOQU1JQ19DT05URU5UX1BSRV9PUFRJT05TX05BTUUiLCJkeW5hbWljQ29udGVudCIsInVybCIsInVwZGF0ZV9jb250ZW50X2NiIiwiaXNOdWxsIiwiYXciLCJkb25lIiwicmVzcG9uc2UiLCJmYWlsIiwiZXJyb3JfY29udGVudCIsImFsd2F5cyIsImFib3J0IiwicmVxdWVzdCIsImJveCIsImRlZmF1bHRzIiwiaGFzX2Zvb3RlciIsImhhc19oZWFkZXIiLCJjbG9zZV9tYW51YWwiLCJESUFMT0dfQUxFUlRfUFJFX09QVElPTlNfTkFNRSIsImNsb3NlX2J1dHRvbl9vcHRpb25zIiwiYWxlcnQiLCJESUFMT0dfQ09ORklSTV9QUkVfT1BUSU9OU19OQU1FIiwiZGVmYXVsdF9idXR0b24iLCJjb25maXJtIiwibm9vcCIsImxhc3QiLCJPYmplY3QiLCJrZXlzIiwiRElBTE9HX0lGUkFNRV9QUkVfT1BUSU9OU19OQU1FIiwiYXR0cmlidXRlcyIsImlGcmFtZSIsImF0dHJzIiwidmFsIiwiaXNCb29sZWFuIiwicHVzaCIsIlNVQk1JVCIsIlNVQk1JVF9DQU5DRUwiLCJESUFMT0dfRk9STV9QUkVfT1BUSU9OU19OQU1FIiwiYXV0b19mb2N1cyIsImJ1dHRvbnNfZXh0ZW5kX29wdGlvbnMiLCJjYW5jZWwiLCJzdWJtaXQiLCJhdHRhY2hlZF9idXR0b24iLCJzZXRUaW1lb3V0IiwiZmluZCIsImZpcnN0IiwiZm9jdXMiLCJESUFMT0dfUFJPTVBUX1BSRV9PUFRJT05TX05BTUUiLCJkZWZhdWx0X3ZhbHVlIiwicGxhY2Vob2xkZXIiLCJpbnB1dF90eXBlIiwiaW5wdXRfY2xhc3NlcyIsInByb21wdCIsInByb21wdF9jYiIsImJ0bl9uYW1lIiwiYnRuIl0sIm1hcHBpbmdzIjoiQ0FBQyxTQUFVQSxFQUFNQyxHQUNiLEdBQXNCLGtCQUFYQyxTQUF5QkEsT0FBT0MsSUFBSyxDQUM1QyxHQUFJQyxJQUNBLFNBQ0EsVUFDQSx3QkFDQSxzQkFDQSxtQkFFSkYsUUFBT0UsRUFBYyxTQUFVQyxFQUFHQyxFQUFPQyxFQUFjQyxFQUFZQyxHQUMvRCxHQUFJQyxHQUFTVCxFQUFRSSxFQUFHQyxFQUFPQyxFQUFjQyxFQUFZQyxFQUt6RCxPQUhBSCxHQUFNSyxhQUFlRCxFQUNyQlYsRUFBS1csYUFBZUQsRUFFYkEsUUFFUixDQUNILEdBQUlBLEdBQVNULEVBQ1RELEVBQUtLLEVBQ0xMLEVBQUtNLE1BQ0xOLEVBQUtNLE1BQU1DLGNBQWdCUCxFQUFLTyxhQUNoQ1AsRUFBS00sTUFBTUUsWUFBY1IsRUFBS1EsV0FDOUJSLEVBQUtNLE1BQU1HLFVBQVlULEVBQUtTLFNBR2hDVCxHQUFLTSxNQUFNSyxhQUFlRCxFQUMxQlYsRUFBS1csYUFBZUQsSUFFMUJFLEtBQU0sU0FBVVAsRUFBR0MsRUFBT0MsRUFBY0MsRUFBWUMsR0FvQ2xELFFBQVNJLEdBQXNCQyxHQUMzQixNQUFPQSxHQUFPQyxhQUFlRCxFQUFPRSxZQUFjRixFQUFPRyxZQUFZQyxjQUd6RSxRQUFTQyxHQUFVQyxHQUNmQSxFQUFTQyxZQUFZLFNBQVVDLEdBQy9CRixFQUFTQyxZQUFZLFdBQVlFLEdBQ2pDSCxFQUFTQyxZQUFZLHVCQUF3QkcsR0FDN0NKLEVBQVNDLFlBQVksd0JBQXlCSSxHQUdsRCxRQUFTSCxHQUFv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Y0FBZSxlQUNmWix3QkFDSUUsUUFDSXROLE1BQU8sU0FJbkI2RSxFQUFPb0osT0FBUyxTQUFVOUUsRUFBU25ILEVBQVUvRCxHQXNCekMsUUFBU2lRLEdBQVVDLEVBQVU3RixFQUFNOEYsR0FDL0IsSUFBSzlGLEVBRUQsV0FEQXRHLElBQVMsRUFJYixJQUFJUixHQUFRdkQsRUFBUTRQLGFBRWhCLFlBQWFNLElBQ2IzTSxFQUFROEcsRUFBS21GLEtBQUssNkJBQTZCWixNQUMvQ3VCLEVBQUlqTCxlQUdSbkIsRUFBU1IsR0FsQ2IsR0FBSW9FLEtBdUNKLE9BcENLdEosR0FBRXFILFNBQVMxRixLQUNaQSxHQUNJb0ksTUFBT3BJLEVBQVUsS0FHcEIzQixFQUFFMkYsV0FBV0QsS0FDZEEsRUFBVzFGLEVBQUUrUCxNQUdqQnBPLEVBQVV4QixFQUFXNkIsSUFBSXVHLEVBQU8rSSwrQkFBZ0MzUCxHQUVoRTJILEVBQVFtSCxLQUFLLE1BQU81RCxFQUFTLFFBQzdCdkQsRUFBUW1ILEtBQUssbUNBQW9DOU8sRUFBUThQLFdBQWEsS0FDbEUsVUFBVzlQLEVBQVErUCxjQUFnQixLQUNuQyxVQUFXL1AsRUFBUTRQLGNBQWdCLElBQ25DLGdCQUFpQjVQLEVBQVE2UCxZQUFjLElBQ3ZDLE1Ba0JLakosRUFBT3lELEtBQUsxQyxFQUFRK0MsS0FBSyxJQUFLdUYsRUFBVzVSLEVBQUV3RixLQUFLN0QsRUFBUyxnQkFBaUIsY0FBZSxhQUFjIiwiZmlsZSI6ImRpYWxvZy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBbXG4gICAgICAgICAgICAnbG9kYXNoJyxcbiAgICAgICAgICAgICdraG9haWpzJyxcbiAgICAgICAgICAgICdraG9haWpzLWV2ZW50LWVtaXR0ZXInLFxuICAgICAgICAgICAgJ2tob2FpanMtcHJlLW9wdGlvbnMnLFxuICAgICAgICAgICAgJ2tob2FpanMtdGVtcGxhdGUnXG4gICAgICAgIF07XG4gICAgICAgIGRlZmluZShkZXBlbmRlbmNpZXMsIGZ1bmN0aW9uIChfLCBLaG9haSwgRXZlbnRFbWl0dGVyLCBQcmVPcHRpb25zLCBUZW1wbGF0ZSkge1xuICAgICAgICAgICAgdmFyIG1vZHVsZSA9IGZhY3RvcnkoXywgS2hvYWksIEV2ZW50RW1pdHRlciwgUHJlT3B0aW9ucywgVGVtcGxhdGUpO1xuXG4gICAgICAgICAgICBLaG9haS5EaWFsb2dCdXR0b24gPSBtb2R1bGU7XG4gICAgICAgICAgICByb290LkRpYWxvZ0J1dHRvbiA9IG1vZHVsZTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGZhY3RvcnkoXG4gICAgICAgICAgICByb290Ll8sXG4gICAgICAgICAgICByb290Lktob2FpLFxuICAgICAgICAgICAgcm9vdC5LaG9haS5FdmVudEVtaXR0ZXIgfHwgcm9vdC5FdmVudEVtaXR0ZXIsXG4gICAgICAgICAgICByb290Lktob2FpLlByZU9wdGlvbnMgfHwgcm9vdC5QcmVPcHRpb25zLFxuICAgICAgICAgICAgcm9vdC5LaG9haS5UZW1wbGF0ZSB8fCByb290LlRlbXBsYXRlXG4gICAgICAgICk7XG5cbiAgICAgICAgcm9vdC5LaG9haS5EaWFsb2dCdXR0b24gPSBtb2R1bGU7XG4gICAgICAgIHJvb3QuRGlhbG9nQnV0dG9uID0gbW9kdWxlO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKF8sIEtob2FpLCBFdmVudEVtaXR0ZXIsIFByZU9wdGlvbnMsIFRlbXBsYXRlKSB7XG4gICAgdmFyIHZlcnNpb24gPSAnMC4wLjEnO1xuICAgIHZhciBjb25zdGFudCA9IHtcbiAgICAgICAgUFJFX09QVElPTlNfTkFNRTogJ0tob2FpLkRpYWxvZ0J1dHRvbicsXG4gICAgICAgIFRFTVBMQVRFX1RZUEU6ICdEaWFsb2dCdXR0b24nLFxuICAgICAgICBUWVBFX0lORk86ICdpbmZvJyxcbiAgICAgICAgVFlQRV9QUklNQVJZOiAncHJpbWFyeScsXG4gICAgICAgIFRZUEVfU1VDQ0VTUzogJ3N1Y2Nlc3MnLFxuICAgICAgICBUWVBFX1dBUk5JTkc6ICd3YXJuaW5nJyxcbiAgICAgICAgVFlQRV9EQU5HRVI6ICdkYW5nZXInLFxuXG4gICAgICAgIE9LOiAnb2snLFxuICAgICAgICBDQU5DRUw6ICdjYW5jZWwnLFxuICAgICAgICBZRVM6ICd5ZXMnLFxuICAgICAgICBOTzogJ25vJyxcbiAgICAgICAgUkVUUlk6ICdyZXRyeScsXG5cbiAgICAgICAgQlVUVE9OU19PS19PTkxZOiBbJ29rJ10sXG4gICAgICAgIEJVVFRPTlNfT0tfQ0FOQ0VMOiBbJ29rJywgJ2NhbmNlbCddLFxuICAgICAgICBCVVRUT05TX1lFU19OTzogWyd5ZXMnLCAnbm8nXSxcbiAgICAgICAgQlVUVE9OU19ZRVNfTk9fQ0FOQ0VMOiBbJ3llcycsICdubycsICdjYW5jZWwnXSxcbiAgICAgICAgQlVUVE9OU19SRVRSWV9DQU5DRUw6IFsncmV0cnknLCAnY2FuY2VsJ11cbiAgICB9O1xuICAgIHZhciBfYnV0dG9ucyA9IHt9O1xuXG4gICAgUHJlT3B0aW9ucy5kZWZpbmUoY29uc3RhbnQuUFJFX09QVElPTlNfTkFNRSwge1xuICAgICAgICBsYWJlbDogJ1VudGl0bGVkJyxcbiAgICAgICAgaWNvbjogJycsXG4gICAgICAgIHR5cGU6IGNvbnN0YW50LlRZUEVfSU5GTyxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgaGFuZGxlcjogbnVsbCxcbiAgICAgICAgZGlzYWJsZV9vbl9wZW5kaW5nOiB0cnVlLFxuICAgICAgICBjbGlja2FibGU6IF9kZWZhdWx0X2NsaWNrYWJsZV9jYixcbiAgICAgICAgdGVtcGxhdGVfbmFtZTogJycsXG4gICAgICAgIHRlbXBsYXRlOiB7fVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIF9kZWZhdWx0X2NsaWNrYWJsZV9jYihidXR0b24pIHtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbi5pc1Zpc2libGUoKSAmJiBidXR0b24uaXNFbmFibGUoKSAmJiBidXR0b24uZ2V0RGlhbG9nKCkuaXNDbGlja2FibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfaW5pdF9idG4oaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuYWRkTGlzdGVuZXIoJ2xpc3RlbicsIF9idG5fZXZlbnRfYXR0YWNoZWQpO1xuICAgICAgICBpbnN0YW5jZS5hZGRMaXN0ZW5lcigndW5saXN0ZW4nLCBfYnRuX2V2ZW50X2RldGFjaGVkKTtcbiAgICAgICAgaW5zdGFuY2UuYWRkTGlzdGVuZXIoJ2RpYWxvZy50b2dnbGVfZW5hYmxlJywgX2J0bl9ldmVudF9kaWFsb2dfdG9nZ2xlX2VuYWJsZSk7XG4gICAgICAgIGluc3RhbmNlLmFkZExpc3RlbmVyKCdkaWFsb2cudG9nZ2xlX3BlbmRpbmcnLCBfYnRuX2V2ZW50X2RpYWxvZ190b2dnbGVfcGVuZGluZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2J0bl9ldmVudF9hdHRhY2hlZChkaWFsb2cpIHtcbiAgICAgICAgX2J1dHRvbnNbdGhpcy5pZF0uZGlhbG9nID0gZGlhbG9nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9idG5fZXZlbnRfZGV0YWNoZWQoZGlhbG9nKSB7XG4gICAgICAgIF9idXR0b25zW3RoaXMuaWRdLmRpYWxvZyA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2J0bl9ldmVudF9kaWFsb2dfdG9nZ2xlX2VuYWJsZShub3RpY2VfZGF0YSkge1xuICAgICAgICB0aGlzLnRvZ2dsZUVuYWJsZShub3RpY2VfZGF0YS5kYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfYnRuX2V2ZW50X2RpYWxvZ190b2dnbGVfcGVuZGluZyhub3RpY2VfZGF0YSkge1xuICAgICAgICBpZiAobm90aWNlX2RhdGEuZGF0YSkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlX29uX3BlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVuYWJsZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUVuYWJsZSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRGlhbG9nQnV0dG9uKG9wdGlvbikge1xuICAgICAgICB0aGlzLnR5cGVfcHJlZml4ID0gJ2RpYWxvZ19idXR0b24nO1xuICAgICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBQcmVPcHRpb25zLmdldChjb25zdGFudC5QUkVfT1BUSU9OU19OQU1FLCB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmlkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9idXR0b25zW3RoaXMuaWRdID0ge1xuICAgICAgICAgICAgZGlhbG9nOiBudWxsLFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZV9pbnN0YW5jZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMub3B0aW9uKHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5oYXNPd25Qcm9wZXJ0eSgnZXZlbnRzJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVycyhvcHRpb24uZXZlbnRzKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9uWydldmVudHMnXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5vcHRpb24ob3B0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9pbml0X2J0bih0aGlzKTtcbiAgICB9XG5cbiAgICBLaG9haS51dGlsLmluaGVyaXQoRGlhbG9nQnV0dG9uLCBFdmVudEVtaXR0ZXIpO1xuICAgIEtob2FpLnV0aWwuZGVmaW5lQ29uc3RhbnQoRGlhbG9nQnV0dG9uLCAndmVyc2lvbicsIHZlcnNpb24pO1xuICAgIEtob2FpLnV0aWwuZGVmaW5lQ29uc3RhbnQoRGlhbG9nQnV0dG9uLCBjb25zdGFudCk7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7e319IG9wdGlvbnNcbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24uZ2xvYmFsT3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgUHJlT3B0aW9ucy51cGRhdGUoRGlhbG9nQnV0dG9uLlBSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLnNldFRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlX2luc3RhbmNlKSB7XG4gICAgICAgIGlmICghKHRlbXBsYXRlX2luc3RhbmNlIGluc3RhbmNlb2YgVGVtcGxhdGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVGVtcGxhdGUgaW5zdGFuY2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfYnV0dG9uc1t0aGlzLmlkXS50ZW1wbGF0ZV9pbnN0YW5jZSkge1xuICAgICAgICAgICAgX2J1dHRvbnNbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgX2J1dHRvbnNbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGVtcGxhdGVfaW5zdGFuY2Uub3B0aW9uKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgICAgIF9idXR0b25zW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlID0gdGVtcGxhdGVfaW5zdGFuY2U7XG4gICAgICAgIHRlbXBsYXRlX2luc3RhbmNlLmNvbm5lY3QodGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGVtcGxhdGUgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7bnVsbHwqfVxuICAgICAqL1xuICAgIERpYWxvZ0J1dHRvbi5wcm90b3R5cGUuZ2V0VGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX2J1dHRvbnNbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRlbXBsYXRlX25hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdF9vcHRpb25zID0gUHJlT3B0aW9ucy5nZXQoRGlhbG9nQnV0dG9uLlBSRV9PUFRJT05TX05BTUUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRfb3B0aW9ucy50ZW1wbGF0ZV9uYW1lICYmIFRlbXBsYXRlLmhhc1RlbXBsYXRlKERpYWxvZ0J1dHRvbi5URU1QTEFURV9UWVBFLCBkZWZhdWx0X29wdGlvbnMudGVtcGxhdGVfbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRlbXBsYXRlX25hbWUgPSBkZWZhdWx0X29wdGlvbnMudGVtcGxhdGVfbmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdF90ZW1wbGF0ZSA9IFRlbXBsYXRlLmRlZmF1bHRUZW1wbGF0ZShEaWFsb2dCdXR0b24uVEVNUExBVEVfVFlQRSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbHNlICE9PSBkZWZhdWx0X3RlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudGVtcGxhdGVfbmFtZSA9IGRlZmF1bHRfdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcmVPcHRpb25zLnVwZGF0ZShEaWFsb2dCdXR0b24uUFJFX09QVElPTlNfTkFNRSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlX25hbWU6IGRlZmF1bHRfdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaWFsb2cgYnV0dG9uIGRlZmF1bHQgdGVtcGxhdGUgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZShUZW1wbGF0ZS50ZW1wbGF0ZUluc3RhbmNlKERpYWxvZ0J1dHRvbi5URU1QTEFURV9UWVBFLCB0aGlzLm9wdGlvbnMudGVtcGxhdGVfbmFtZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9idXR0b25zW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlO1xuICAgIH07XG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbiA9IEtob2FpLnV0aWwuYmVPYmplY3QuYXBwbHkoS2hvYWksIF8udG9BcnJheShhcmd1bWVudHMpKTtcblxuICAgICAgICBpZiAob3B0aW9uLnRlbXBsYXRlX25hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoVGVtcGxhdGUudGVtcGxhdGVJbnN0YW5jZShEaWFsb2dCdXR0b24uVEVNUExBVEVfVFlQRSwgb3B0aW9uLnRlbXBsYXRlX25hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9uLnRlbXBsYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmdldFRlbXBsYXRlKCkub3B0aW9uKG9wdGlvbi50ZW1wbGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsIF8ub21pdChvcHRpb24sIFsndGVtcGxhdGVfbmFtZSddKSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIERpYWxvZ0J1dHRvbi5wcm90b3R5cGUuc2V0SGFuZGxlciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm9wdGlvbignaGFuZGxlcicsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IGRpYWxvZyBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHsoRGlhbG9nfGJvb2xlYW4pfSBGYWxzZSBpZiBub3QgYXR0YWNoIHRvIGRpYWxvZyB5ZXRcbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmdldERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF9idXR0b25zW3RoaXMuaWRdLmRpYWxvZykge1xuICAgICAgICAgICAgcmV0dXJuIF9idXR0b25zW3RoaXMuaWRdLmRpYWxvZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5pc0NsaWNrYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuY2xpY2thYmxlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGlja2FibGUuY2FsbCh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMub3B0aW9ucy5jbGlja2FibGUpO1xuICAgIH07XG5cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmlzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oX2J1dHRvbnNbdGhpcy5pZF0udmlzaWJsZSk7XG4gICAgfTtcbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmlzRW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihfYnV0dG9uc1t0aGlzLmlkXS5lbmFibGVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgYnV0dG9uXG4gICAgICogRW1pdCBldmVudHM6XG4gICAgICogLSBjbGljazogcnVuIGJlZm9yZSBidXR0b24gaGFuZGxlciBydW5cbiAgICAgKiAtIGNsaWNrZWQ6IHJ1bmcgYWZ0ZXIgYnV0dG9uIGhhbmRsZXIgcnVuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0NsaWNrYWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnY2xpY2snKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIEtob2FpLnV0aWwuY2FsbEZ1bmModGhpcy5vcHRpb25zLmhhbmRsZXIsIHRoaXMsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoJ2NsaWNrZWQnKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IG9yIGhpZGUgYnV0dG9uXG4gICAgICogRW1pdCBldmVudHM6XG4gICAgICogLSBzaG93L2hpZGVcbiAgICAgKiAtIHRvZ2dsZTogW2lzIHNob3c/XVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdyBUcnVlIG9yIG1pc3Npbmc6IHNob3csIEZhbHNlOiBoaWRlXG4gICAgICovXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoc2hvdykge1xuICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChzaG93KSkge1xuICAgICAgICAgICAgc2hvdyA9ICFfYnV0dG9uc1t0aGlzLmlkXS52aXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9idXR0b25zW3RoaXMuaWRdLnZpc2libGUgIT09IHNob3cpIHtcbiAgICAgICAgICAgIF9idXR0b25zW3RoaXMuaWRdLnZpc2libGUgPSBzaG93O1xuICAgICAgICAgICAgaWYgKHNob3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnc2hvdycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgndG9nZ2xlJywgc2hvdyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERpYWxvZ0J1dHRvbi5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2dnbGUodHJ1ZSk7XG4gICAgfTtcbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIGVuYWJsZWQgc3RhdHVzXG4gICAgICogRW1pdCBldmVudHM6XG4gICAgICogLSBlbmFibGVkL2Rpc2FibGVkXG4gICAgICogLSB0b2dnbGVfZW5hYmxlZDogW2lzIGVuYWJsZWQ/XVxuICAgICAqIEBwYXJhbSBpc19lbmFibGVcbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLnRvZ2dsZUVuYWJsZSA9IGZ1bmN0aW9uIChpc19lbmFibGUpIHtcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoaXNfZW5hYmxlKSkge1xuICAgICAgICAgICAgaXNfZW5hYmxlID0gIV9idXR0b25zW3RoaXMuaWRdLmVuYWJsZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2J1dHRvbnNbdGhpcy5pZF0uZW5hYmxlZCAhPT0gaXNfZW5hYmxlKSB7XG4gICAgICAgICAgICBfYnV0dG9uc1t0aGlzLmlkXS5lbmFibGVkID0gaXNfZW5hYmxlO1xuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoaXNfZW5hYmxlID8gJ2VuYWJsZWQnIDogJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgndG9nZ2xlX2VuYWJsZScsIGlzX2VuYWJsZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUVuYWJsZShmYWxzZSk7XG4gICAgfTtcbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2dnbGVFbmFibGUodHJ1ZSk7XG4gICAgfTtcblxuXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlKCkucmVuZGVyKCk7XG4gICAgfTtcblxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCBidXR0b24gRE9NXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5yZURyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfYnV0dG9uc1t0aGlzLmlkXS50ZW1wbGF0ZV9pbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9idXR0b25zW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlLnJlRHJhdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIERpYWxvZ0J1dHRvbi5wcm90b3R5cGUuZ2V0RE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoX2J1dHRvbnNbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UgJiYgKF9idXR0b25zW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlIGluc3RhbmNlb2YgVGVtcGxhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gX2J1dHRvbnNbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UuZ2V0RE9NKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHJldHVybnMge0RpYWxvZ0J1dHRvbnxudWxsfCp8T2JqZWN0fEV2ZW50RW1pdHRlcnxEaWFsb2d9XG4gICAgICovXG4gICAgRGlhbG9nQnV0dG9uLnByb3RvdHlwZS5nZXRPdGhlckJ1dHRvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERpYWxvZygpLmdldEJ1dHRvbihuYW1lKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGlhbG9nIGNsb3NlIFwiYnlcIiBrZXlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIERpYWxvZ0J1dHRvbi5wcm90b3R5cGUuZ2V0Q2xvc2VLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubmFtZTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSBkaWFsb2dcbiAgICAgKiBAcGFyYW0gZm9yY2VcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgIHZhciBkaWFsb2cgPSB0aGlzLmdldERpYWxvZygpO1xuXG4gICAgICAgIGlmIChkaWFsb2cpIHtcbiAgICAgICAgICAgIGRpYWxvZy5jbG9zZShmb3JjZSwgdGhpcy5nZXRDbG9zZUtleSgpKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGRpYWxvZyBjbG9zZWQgYnkgdGhpcyBidXR0b25cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBEaWFsb2dCdXR0b24ucHJvdG90eXBlLndhc0Nsb3NlRGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGlhbG9nID0gdGhpcy5nZXREaWFsb2coKTtcblxuICAgICAgICBpZiAoZGlhbG9nKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlhbG9nLnNldENsb3NlZEJ5KHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKlxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfCBTdGF0aWMgbWV0aG9kc1xuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfFxuICAgICB8XG4gICAgIHxcbiAgICAgfFxuICAgICAqL1xuXG4gICAgdmFyIGJ1dHRvbl9wcmVfb3B0aW9ucyA9IHt9O1xuXG4gICAgRGlhbG9nQnV0dG9uLmlzRGVmaW5lZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBidXR0b25fcHJlX29wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgfTtcblxuICAgIERpYWxvZ0J1dHRvbi5kZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucywgZnJlZXplX29wdGlvbnMpIHtcbiAgICAgICAgYnV0dG9uX3ByZV9vcHRpb25zW25hbWVdID0ge1xuICAgICAgICAgICAgb3B0aW9uczogXy5pc09iamVjdChvcHRpb25zKSA/IG9wdGlvbnMgOiB7fSxcbiAgICAgICAgICAgIGZyZWV6ZV9vcHRpb25zOiBfLmlzT2JqZWN0KGZyZWV6ZV9vcHRpb25zKSA/IGZyZWV6ZV9vcHRpb25zIDoge31cbiAgICAgICAgfTtcbiAgICAgICAgYnV0dG9uX3ByZV9vcHRpb25zW25hbWVdLmZyZWV6ZV9vcHRpb25zLm5hbWUgPSBuYW1lO1xuICAgIH07XG5cbiAgICBEaWFsb2dCdXR0b24udXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChEaWFsb2dCdXR0b24uaXNEZWZpbmVkKG5hbWUpKSB7XG4gICAgICAgICAgICBfLmV4dGVuZChidXR0b25fcHJlX29wdGlvbnNbbmFtZV0ub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG5cbiAgICBEaWFsb2dCdXR0b24uZmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlcywgYWxsX2J1dHRvbl9vcHRpb25zLCBidXR0b25fb3B0aW9ucykge1xuICAgICAgICBpZiAoIV8uaXNPYmplY3QoYWxsX2J1dHRvbl9vcHRpb25zKSkge1xuICAgICAgICAgICAgYWxsX2J1dHRvbl9vcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzT2JqZWN0KGJ1dHRvbl9vcHRpb25zKSkge1xuICAgICAgICAgICAgYnV0dG9uX29wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBidXR0b25zID0gXy5jYXN0QXJyYXkodHlwZXMpLm1hcChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMsIHR5cGVfb3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKCFEaWFsb2dCdXR0b24uaXNEZWZpbmVkKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaWFsb2cgQnV0dG9uIHR5cGUgaXMgdW5yZWdpc3RlcmVkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR5cGVfb3B0aW9ucyA9IGJ1dHRvbl9wcmVfb3B0aW9uc1t0eXBlXTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSxcbiAgICAgICAgICAgICAgICB0eXBlX29wdGlvbnMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfLmNsb25lKGFsbF9idXR0b25fb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgYnV0dG9uX29wdGlvbnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyBidXR0b25fb3B0aW9uc1t0eXBlXSA6IHt9LFxuICAgICAgICAgICAgICAgIHR5cGVfb3B0aW9ucy5mcmVlemVfb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgRGlhbG9nQnV0dG9uKG9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYnV0dG9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBidXR0b25zLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnV0dG9ucztcbiAgICB9O1xuXG4gICAgRGlhbG9nQnV0dG9uLmRlZmF1bHRDbGlja2FibGUgPSBfZGVmYXVsdF9jbGlja2FibGVfY2I7XG5cbiAgICAvKlxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfCBQcmVkZWZpbmUgYnV0dG9uIHR5cGVzXG4gICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICB8XG4gICAgIHxcbiAgICAgfFxuICAgICB8XG4gICAgICovXG5cbiAgICBfLmVhY2goWydPaycsICdZZXMnLCAnTm8nLCAnUmV0cnknLCAnSWdub3JlJ10sIGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICBEaWFsb2dCdXR0b24uZGVmaW5lKGxhYmVsLnRvTG93ZXJDYXNlKCksIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIERpYWxvZ0J1dHRvbi5kZWZpbmUoJ2NhbmNlbCcsIHtcbiAgICAgICAgbGFiZWw6ICdDYW5jZWwnLFxuICAgICAgICBkaXNhYmxlX29uX3BlbmRpbmc6IGZhbHNlXG4gICAgfSk7XG5cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICBLaG9haS51dGlsLmRlZmluZUNvbnN0YW50KERpYWxvZ0J1dHRvbiwge1xuICAgICAgICAgICAgQ0xPU0U6ICdjbG9zZSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gX2Nsb3NlX2RpYWxvZ19oYW5kbGVyKGJ1dHRvbikge1xuICAgICAgICAgICAgdmFyIGRpYWxvZyA9IGJ1dHRvbi5nZXREaWFsb2coKTtcblxuICAgICAgICAgICAgaWYgKGRpYWxvZykge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbG9zZURpYWxvZyhCb29sZWFuKGJ1dHRvbi5vcHRpb25zLmZvcmNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBEaWFsb2dCdXR0b24uZGVmaW5lKERpYWxvZ0J1dHRvbi5DTE9TRSwge1xuICAgICAgICAgICAgbGFiZWw6ICdDbG9zZScsXG4gICAgICAgICAgICB0eXBlOiBEaWFsb2dCdXR0b24uVFlQRV9JTkZPLFxuICAgICAgICAgICAgZm9yY2U6IGZhbHNlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGhhbmRsZXI6IF9jbG9zZV9kaWFsb2dfaGFuZGxlclxuICAgICAgICB9KTtcbiAgICB9KSgpO1xuXG5cbiAgICByZXR1cm4gRGlhbG9nQnV0dG9uO1xufSkpO1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XHJcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgdmFyIGRlcGVuZGVuY2llcyA9IFtcclxuICAgICAgICAgICAgJ2xvZGFzaCcsXHJcbiAgICAgICAgICAgICdqcXVlcnknLFxyXG4gICAgICAgICAgICAna2hvYWlqcycsXHJcbiAgICAgICAgICAgICdraG9haWpzLWV2ZW50LWVtaXR0ZXInLFxyXG4gICAgICAgICAgICAna2hvYWlqcy1wcmUtb3B0aW9ucycsXHJcbiAgICAgICAgICAgICdraG9haWpzLXRlbXBsYXRlJyxcclxuICAgICAgICAgICAgJ2RpYWxvZ19idXR0b24nXHJcbiAgICAgICAgXTtcclxuICAgICAgICBkZWZpbmUoZGVwZW5kZW5jaWVzLCBmdW5jdGlvbiAoXywgalF1ZXJ5LCBLaG9haSwgRXZlbnRFbWl0dGVyLCBQcmVPcHRpb25zLCBUZW1wbGF0ZSwgRGlhbG9nQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2R1bGUgPSBmYWN0b3J5KF8sIGpRdWVyeSwgS2hvYWksIEV2ZW50RW1pdHRlciwgUHJlT3B0aW9ucywgVGVtcGxhdGUsIERpYWxvZ0J1dHRvbik7XHJcblxyXG4gICAgICAgICAgICBLaG9haS5EaWFsb2cgPSBtb2R1bGU7XHJcbiAgICAgICAgICAgIHJvb3QuRGlhbG9nID0gbW9kdWxlO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTtcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXHJcbiAgICAgICAgdmFyIG1vZHVsZSA9IGZhY3RvcnkoXHJcbiAgICAgICAgICAgIHJvb3QuXyxcclxuICAgICAgICAgICAgcm9vdC5qUXVlcnksXHJcbiAgICAgICAgICAgIHJvb3QuS2hvYWksXHJcbiAgICAgICAgICAgIChyb290Lktob2FpICYmIHJvb3QuS2hvYWkuRXZlbnRFbWl0dGVyKSB8fCByb290LkV2ZW50RW1pdHRlcixcclxuICAgICAgICAgICAgKHJvb3QuS2hvYWkgJiYgcm9vdC5LaG9haS5QcmVPcHRpb25zKSB8fCByb290LlByZU9wdGlvbnMsXHJcbiAgICAgICAgICAgIChyb290Lktob2FpICYmIHJvb3QuS2hvYWkuVGVtcGxhdGUpIHx8IHJvb3QuVGVtcGxhdGUsXHJcbiAgICAgICAgICAgIChyb290Lktob2FpICYmIHJvb3QuS2hvYWkuRGlhbG9nQnV0dG9uKSB8fCByb290LkRpYWxvZ0J1dHRvblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJvb3QuS2hvYWkuRGlhbG9nID0gbW9kdWxlO1xyXG4gICAgICAgIHJvb3QuRGlhbG9nID0gbW9kdWxlO1xyXG4gICAgfVxyXG59KHRoaXMsIGZ1bmN0aW9uIChfLCBqUXVlcnksIEtob2FpLCBFdmVudEVtaXR0ZXIsIFByZU9wdGlvbnMsIFRlbXBsYXRlLCBEaWFsb2dCdXR0b24pIHtcclxuICAgIHZhciB2ZXJzaW9uID0gJzAuMC4xJztcclxuICAgIHZhciBjb25zdGFudCA9IHtcclxuICAgICAgICBQUkVfT1BUSU9OU19OQU1FOiAnS2hvYWkuRGlhbG9nJyxcclxuICAgICAgICBURU1QTEFURV9UWVBFOiAnRGlhbG9nJyxcclxuICAgICAgICBTVEFUVVNfSU5JVElBTDogJ2luaXRpYWwnLFxyXG4gICAgICAgIFNUQVRVU19PUEVORUQ6ICdvcGVuZWQnLFxyXG4gICAgICAgIFNUQVRVU19ISURJTkc6ICdoaWRpbmcnLFxyXG4gICAgICAgIFNUQVRVU19DTE9TRUQ6ICdyZW1vdmVkJyxcclxuXHJcbiAgICAgICAgVFlQRV9JTkZPOiAnaW5mbycsXHJcbiAgICAgICAgVFlQRV9TVUNDRVNTOiAnc3VjY2VzcycsXHJcbiAgICAgICAgVFlQRV9QUklNQVJZOiAncHJpbWFyeScsXHJcbiAgICAgICAgVFlQRV9XQVJOSU5HOiAnd2FybmluZycsXHJcbiAgICAgICAgVFlQRV9EQU5HRVI6ICdkYW5nZXInLFxyXG5cclxuICAgICAgICBTSVpFX1NNQUxMOiAnc21hbGwnLFxyXG4gICAgICAgIFNJWkVfTk9STUFMOiAnbm9ybWFsJyxcclxuICAgICAgICBTSVpFX0xBUkdFOiAnbGFyZ2UnXHJcbiAgICB9O1xyXG4gICAgdmFyIF9kaWFsb2dzID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gX2RlZmF1bHRfY2xvc2FibGVfZnVuYyhkaWFsb2dfaW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gZGlhbG9nX2luc3RhbmNlLmlzRW5hYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2RlZmF1bHRfY2xpY2thYmxlX2Z1bmMoZGlhbG9nX2luc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGRpYWxvZ19pbnN0YW5jZS5pc0VuYWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIFByZU9wdGlvbnMuZGVmaW5lKGNvbnN0YW50LlBSRV9PUFRJT05TX05BTUUsIHtcclxuICAgICAgICB0aXRsZTogJ0RpYWxvZycsXHJcbiAgICAgICAgdHlwZTogY29uc3RhbnQuVFlQRV9JTkZPLFxyXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICAgIGNvbnRlbnRfaGFuZGxlcjogbnVsbCxcclxuICAgICAgICB0ZW1wbGF0ZV9uYW1lOiAnJyxcclxuICAgICAgICB0ZW1wbGF0ZToge30sXHJcbiAgICAgICAgc2l6ZTogY29uc3RhbnQuU0laRV9OT1JNQUwsXHJcbiAgICAgICAgY2xhc3NlczogJycsXHJcbiAgICAgICAgY2xvc2FibGU6IF9kZWZhdWx0X2Nsb3NhYmxlX2Z1bmMsXHJcbiAgICAgICAgY2xpY2thYmxlOiBfZGVmYXVsdF9jbGlja2FibGVfZnVuY1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzZXREaWFsb2coaWQpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgc3RhdHVzOiBjb25zdGFudC5TVEFUVVNfSU5JVElBTCxcclxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgcGVuZGluZzogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICBhamF4X3dvcmtlcjogbnVsbCxcclxuICAgICAgICAgICAgdGVtcGxhdGVfaW5zdGFuY2U6IG51bGxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChfZGlhbG9ncy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcclxuICAgICAgICAgICAgZGF0YS50ZW1wbGF0ZV9pbnN0YW5jZSA9IF9kaWFsb2dzW2lkXS50ZW1wbGF0ZV9pbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9kaWFsb2dzW2lkXSA9IGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYW4gYWRkIGV2ZW50cyB0byBkaWFsb2cgYnkgYWRkIGV2ZW50cyB0byBvcHRpb24gcGFyYW1ldGVyIGZpZWxkIGFzICdldmVudHMnXHJcbiAgICAgKiBBZGQgYnV0dG9ucyB2aWEgb3B0aW9ucyBwYXJhbWV0ZXIgZmllbGQgYXMgJ2J1dHRvbnMnXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIERpYWxvZyBvcHRpb25zXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBleHRlbmQgRXZlbnRFbWl0dGVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERpYWxvZyhvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy50eXBlX3ByZWZpeCA9ICdkaWFsb2cnO1xyXG5cclxuICAgICAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gUHJlT3B0aW9ucy5nZXQoY29uc3RhbnQuUFJFX09QVElPTlNfTkFNRSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2xvc2VkX2J5ID0gJyc7XHJcbiAgICAgICAgdGhpcy5kYXRhID0ge307XHJcbiAgICAgICAgdGhpcy5idXR0b25zID0ge307XHJcblxyXG4gICAgICAgIHJlc2V0RGlhbG9nKHRoaXMuaWQpO1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbih0aGlzLm9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZXZlbnRzJykgJiYgb3B0aW9ucy5ldmVudHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKG9wdGlvbnMuZXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zWydldmVudHMnXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2J1dHRvbnMnKSAmJiBvcHRpb25zLmJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBfLmVhY2gob3B0aW9ucy5idXR0b25zLCBmdW5jdGlvbiAoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hdHRhY2hCdXR0b24oYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ2J1dHRvbnMnXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9uc1snYnV0dG9ucyddO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbihvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgS2hvYWkudXRpbC5pbmhlcml0KERpYWxvZywgRXZlbnRFbWl0dGVyKTtcclxuXHJcbiAgICBLaG9haS51dGlsLmRlZmluZUNvbnN0YW50KERpYWxvZywgJ3ZlcnNpb24nLCB2ZXJzaW9uKTtcclxuICAgIEtob2FpLnV0aWwuZGVmaW5lQ29uc3RhbnQoRGlhbG9nLCBjb25zdGFudCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB7e319IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgRGlhbG9nLmdsb2JhbE9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgUHJlT3B0aW9ucy51cGRhdGUoRGlhbG9nLlBSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVEaWFsb2dDb250ZW50Q2FsbGJhY2soY29udGVudCkge1xyXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLmNvbnRlbnRfaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgY29udGVudCA9IHRoaXMub3B0aW9ucy5jb250ZW50X2hhbmRsZXIoY29udGVudCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW1pdEV2ZW50KCdjb250ZW50X2xvYWRlZCcsIGNvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ29udGVudChjb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuY29udGVudCkpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoJ2xvYWRfY29udGVudCcpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY29udGVudCA9IHRoaXMub3B0aW9ucy5jb250ZW50KHVwZGF0ZURpYWxvZ0NvbnRlbnRDYWxsYmFjay5iaW5kKHRoaXMpLCB0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLmNvbnRlbnRfaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jb250ZW50X2hhbmRsZXIodGhpcy5vcHRpb25zLmNvbnRlbnQsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jb250ZW50O1xyXG4gICAgfTtcclxuICAgIERpYWxvZy5wcm90b3R5cGUudXBkYXRlQ29udGVudCA9IGZ1bmN0aW9uIChuZXdfY29udGVudCkge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb250ZW50ID0gbmV3X2NvbnRlbnQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzT3BlbmVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoJ3VwZGF0ZV9jb250ZW50JywgbmV3X2NvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEaWFsb2cucHJvdG90eXBlLnNldFRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlX2luc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdGluZygpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGlhbG9nIGlzIG9wZW5lZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISh0ZW1wbGF0ZV9pbnN0YW5jZSBpbnN0YW5jZW9mIFRlbXBsYXRlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVGVtcGxhdGUgaW5zdGFuY2UnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfZGlhbG9nc1t0aGlzLmlkXS50ZW1wbGF0ZV9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBfZGlhbG9nc1t0aGlzLmlkXS50ZW1wbGF0ZV9pbnN0YW5jZS5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIF9kaWFsb2dzW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRlbXBsYXRlX2luc3RhbmNlLm9wdGlvbih0aGlzLm9wdGlvbnMudGVtcGxhdGUpO1xyXG4gICAgICAgIF9kaWFsb2dzW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlID0gdGVtcGxhdGVfaW5zdGFuY2U7XHJcbiAgICAgICAgdGVtcGxhdGVfaW5zdGFuY2UuY29ubmVjdCh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGVtcGxhdGUgaW5zdGFuY2VcclxuICAgICAqIEByZXR1cm5zIHtudWxsfFRlbXBsYXRlfVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghX2RpYWxvZ3NbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudGVtcGxhdGVfbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRfb3B0aW9ucyA9IFByZU9wdGlvbnMuZ2V0KERpYWxvZy5QUkVfT1BUSU9OU19OQU1FKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdF9vcHRpb25zLnRlbXBsYXRlX25hbWUgJiYgVGVtcGxhdGUuaGFzVGVtcGxhdGUoRGlhbG9nLlRFTVBMQVRFX1RZUEUsIGRlZmF1bHRfb3B0aW9ucy50ZW1wbGF0ZV9uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZV9uYW1lID0gZGVmYXVsdF9vcHRpb25zLnRlbXBsYXRlX25hbWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0X3RlbXBsYXRlID0gVGVtcGxhdGUuZGVmYXVsdFRlbXBsYXRlKERpYWxvZy5URU1QTEFURV9UWVBFKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbHNlICE9PSBkZWZhdWx0X3RlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZV9uYW1lID0gZGVmYXVsdF90ZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJlT3B0aW9ucy51cGRhdGUoRGlhbG9nLlBSRV9PUFRJT05TX05BTUUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlX25hbWU6IGRlZmF1bHRfdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaWFsb2cgZGVmYXVsdCB0ZW1wbGF0ZSBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKFRlbXBsYXRlLnRlbXBsYXRlSW5zdGFuY2UoRGlhbG9nLlRFTVBMQVRFX1RZUEUsIHRoaXMub3B0aW9ucy50ZW1wbGF0ZV9uYW1lKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gX2RpYWxvZ3NbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIERpYWxvZy5wcm90b3R5cGUub3B0aW9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbiA9IEtob2FpLnV0aWwuYmVPYmplY3QuYXBwbHkoS2hvYWksIF8udG9BcnJheShhcmd1bWVudHMpKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbi50ZW1wbGF0ZV9uYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoVGVtcGxhdGUudGVtcGxhdGVJbnN0YW5jZShEaWFsb2cuVEVNUExBVEVfVFlQRSwgb3B0aW9uLnRlbXBsYXRlX25hbWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbi50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdldFRlbXBsYXRlKCkub3B0aW9uKG9wdGlvbi50ZW1wbGF0ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfLmV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgZGlhbG9nIHN0YXR1c1xyXG4gICAgICogQHJldHVybnMge3N0cmluZ3xib29sZWFufVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLnN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoX2RpYWxvZ3MuaGFzT3duUHJvcGVydHkodGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9kaWFsb2dzW3RoaXMuaWRdLnN0YXR1cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmlzSW5pdGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMoKSA9PT0gRGlhbG9nLlNUQVRVU19JTklUSUFMO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGRpYWxvZyBzdGF0dXMgaXM6IG9wZW5lZCwgc2hvd2luZyBvciBoaWRpbmdcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmlzT3BlbmVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAtMSAhPT0gW0RpYWxvZy5TVEFUVVNfT1BFTkVELCBEaWFsb2cuU1RBVFVTX0hJRElOR10uaW5kZXhPZih0aGlzLnN0YXR1cygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGRpYWxvZyBpcyBzaG93aW5nXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5pc1Zpc2libGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXMoKSA9PT0gRGlhbG9nLlNUQVRVU19PUEVORUQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIGhpZGluZ1xyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaXNIaWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzKCkgPT09IERpYWxvZy5TVEFUVVNfSElESU5HO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIGNsb3NlZFxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaXNDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzKCkgPT09IERpYWxvZy5TVEFUVVNfQ0xPU0VEO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIGVuYWJsZWRcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmlzRW5hYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBCb29sZWFuKF9kaWFsb2dzW3RoaXMuaWRdLmVuYWJsZWQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIHBlbmRpbmdcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gQm9vbGVhbihfZGlhbG9nc1t0aGlzLmlkXS5wZW5kaW5nKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSBkaWFsb2cgd2hlbiBpdCBpcyBkaXNhYmxlZFxyXG4gICAgICogRW1pdCBldmVudHMgd2hlbiBlbmFibGVkIHN1Y2Nlc3M6XHJcbiAgICAgKiAtIGVuYWJsZWQ6XHJcbiAgICAgKiAtIHRvZ2dsZV9lbmFibGU6XHJcbiAgICAgKiAgICsgMDogdHJ1ZSBpZiBjaGFuZ2UgZXZlbnQgaXMgZW5hYmxlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgb24gZW5hYmxlIHN1Y2Nlc3MsIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlKCkpIHtcclxuICAgICAgICAgICAgX2RpYWxvZ3NbdGhpcy5pZF0uZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnZW5hYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgndG9nZ2xlX2VuYWJsZScsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzYWJsZSBkaWFsb2cgd2hlbiBpdCBpcyBlbmFibGluZ1xyXG4gICAgICogRW1pdCBldmVudHMgd2hlbiBkaXNhYmxlIHN1Y2Nlc3M6XHJcbiAgICAgKiAtIGRpc2FibGVkOlxyXG4gICAgICogLSB0b2dnbGVfZW5hYmxlOlxyXG4gICAgICogICArIDA6IGZhbHNlIGlmIGNoYW5nZSBldmVudCBpcyBkaXNhYmxlXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgb24gZGlzYWJsZSBzdWNjZXNzLCBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIF9kaWFsb2dzW3RoaXMuaWRdLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgndG9nZ2xlX2VuYWJsZScsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBwZW5kaW5nIHN0YXR1cyBpcyBwZW5kaW5nXHJcbiAgICAgKiBFbWl0IGV2ZW50cyB3aGVuIGNoYW5nZSBzdWNjZXNzOlxyXG4gICAgICogLSBwZW5kaW5nOlxyXG4gICAgICogLSB0b2dnbGVfcGVuZGluZzpcclxuICAgICAqICAgKyAwOiB0cnVlIGlmIGNoYW5nZSB0byBwZW5kaW5nXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgb24gY2hhbmdlIHN1Y2Nlc3MsIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5wZW5kaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1BlbmRpbmcoKSkge1xyXG4gICAgICAgICAgICBfZGlhbG9nc1t0aGlzLmlkXS5wZW5kaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KCdwZW5kaW5nJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KCd0b2dnbGVfcGVuZGluZycsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHBlbmRpbmcgc3RhdHVzIGlzIHJlc29sdmVkXHJcbiAgICAgKiBFbWl0IGV2ZW50cyB3aGVuIGNoYW5nZSBzdWNjZXNzOlxyXG4gICAgICogLSByZXNvbHZlZDpcclxuICAgICAqIC0gdG9nZ2xlX3BlbmRpbmc6XHJcbiAgICAgKiAgICsgMDogZmFsc2UgaWYgY2hhbmdlIHRvIHJlc29sdmVkXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgb24gY2hhbmdlIHN1Y2Nlc3MsIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5yZXNvbHZlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1BlbmRpbmcoKSkge1xyXG4gICAgICAgICAgICBfZGlhbG9nc1t0aGlzLmlkXS5wZW5kaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgncmVzb2x2ZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoJ3RvZ2dsZV9wZW5kaW5nJywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RGlhbG9nQnV0dG9ufG9iamVjdH0gYnV0dG9uIERpYWxvZ0J1dHRvbiBpbnN0YW5jZSBvciBidXR0b24gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmF0dGFjaEJ1dHRvbiA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICBpZiAoIShidXR0b24gaW5zdGFuY2VvZiBEaWFsb2dCdXR0b24pKSB7XHJcbiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KGJ1dHRvbikpIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbiA9IG5ldyBEaWFsb2dCdXR0b24oYnV0dG9uKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgoXy5pc1N0cmluZyhidXR0b24pIHx8IF8uaXNOdW1iZXIoYnV0dG9uKSkgJiYgRGlhbG9nQnV0dG9uLmhhcyhidXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24gPSBEaWFsb2dCdXR0b24uZmFjdG9yeShidXR0b24pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJ1dHRvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1dHRvbnNbYnV0dG9uLm9wdGlvbnMubmFtZV0gPSBidXR0b247XHJcbiAgICAgICAgYnV0dG9uLmxpc3Rlbih0aGlzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJ1dHRvbjtcclxuICAgIH07XHJcblxyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5hdHRhY2hNdWx0aUJ1dHRvbnMgPSBmdW5jdGlvbiAoYnV0dG9ucykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgXy5lYWNoKGJ1dHRvbnMsIGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICAgICAgc2VsZi5hdHRhY2hCdXR0b24oYnV0dG9uKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBidXR0b24gZXhpc3RzXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaGFzQnV0dG9uID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b25zLmhhc093blByb3BlcnR5KG5hbWUpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogR2V0IGJ1dHRvbiBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQnV0dG9uIG5hbWVcclxuICAgICAqIEByZXR1cm5zIHtEaWFsb2dCdXR0b259XHJcbiAgICAgKiBAdGhyb3cgR2V0IHVuYXR0YWNoZWQgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuZ2V0QnV0dG9uID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzQnV0dG9uKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR2V0IHVuYXR0YWNoZWQgYnV0dG9uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b25zW25hbWVdO1xyXG4gICAgfTtcclxuICAgIERpYWxvZy5wcm90b3R5cGUucmVtb3ZlQnV0dG9uID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzQnV0dG9uKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVtb3ZlIHVuYXR0YWNoZWQgYnV0dG9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYnV0dG9uc1tuYW1lXS51bmxpc3Rlbih0aGlzKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5idXR0b25zW25hbWVdO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIGNsaWNrYWJsZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaXNDbGlja2FibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja2FibGUpIHtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuY2xpY2thYmxlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGlja2FibGUodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5vcHRpb25zLmNsaWNrYWJsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmNsaWNrID0gZnVuY3Rpb24gKGJ1dHRvbl9uYW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDbGlja2FibGUoKSAmJiB0aGlzLmhhc0J1dHRvbihidXR0b25fbmFtZSkpIHtcclxuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuZ2V0QnV0dG9uKGJ1dHRvbl9uYW1lKTtcclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnY2xpY2tlZCcsIGJ1dHRvbl9uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgZGlhbG9nIGlzIGNsb3NlYWJsZVxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaXNDbG9zZWFibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5jbG9zYWJsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsb3NhYmxlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMub3B0aW9ucy5jbG9zYWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzKCkgPT09IERpYWxvZy5TVEFUVVNfSU5JVElBTCkge1xyXG4gICAgICAgICAgICBpZiAoIV9kaWFsb2dzW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldFRlbXBsYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkX2J5ID0gJyc7XHJcbiAgICAgICAgICAgIF9kaWFsb2dzW3RoaXMuaWRdLnN0YXR1cyA9IERpYWxvZy5TVEFUVVNfT1BFTkVEO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnb3BlbicpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSBkaWFsb2dcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNWaXNpYmxpbmcoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnaGlkZScpO1xyXG4gICAgICAgICAgICBfZGlhbG9nc1t0aGlzLmlkXS5zdGF0dXMgPSBEaWFsb2cuU1RBVFVTX0hJRElORztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3cgZGlhbG9nXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSGlkaW5nKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnQoJ3Nob3cnKTtcclxuICAgICAgICAgICAgX2RpYWxvZ3NbdGhpcy5pZF0uc3RhdHVzID0gRGlhbG9nLlNUQVRVU19PUEVORUQ7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSBkaWFsb2dcclxuICAgICAqIEVtaXQgZXZlbnQ6XHJcbiAgICAgKiAtIGNsb3NlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZV0gRm9yY2UgY2xvc2UgZGlhbG9nXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2J5XSBjbG9zZSBjYWxsZXJcclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChmb3JjZSwgYnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZWQoKSAmJiAoZm9yY2UgfHwgdGhpcy5pc0Nsb3NlYWJsZSgpKSkge1xyXG4gICAgICAgICAgICBieSA9IGJ5IHx8ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRFdmVudCgnY2xvc2UnLCBmb3JjZSwgYnkpO1xyXG5cclxuICAgICAgICAgICAgcmVzZXREaWFsb2codGhpcy5pZCk7XHJcblxyXG4gICAgICAgICAgICBfZGlhbG9nc1t0aGlzLmlkXS5zdGF0dXMgPSBEaWFsb2cuU1RBVFVTX0NMT1NFRDtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZWRfYnkgPSBieTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KCdjbG9zZWQnLCBmb3JjZSwgYnkpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBjbG9zZWQgYnkgdmFsdWVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfERpYWxvZ0J1dHRvbn0gYnV0dG9uXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgRGlhbG9nLnByb3RvdHlwZS5zZXRDbG9zZWRCeSA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgICAgICAgIGlmICghYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24gPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1dHRvbiBpbnN0YW5jZW9mIERpYWxvZ0J1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uID0gYnV0dG9uLmdldENsb3NlS2V5KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghXy5pc1N0cmluZyhidXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24gKz0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkX2J5ID0gYnV0dG9uO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIGJ1dHRvbiB3YXMgY2xvc2UgZGlhbG9nXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xEaWFsb2dCdXR0b259IGJ1dHRvblxyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIERpYWxvZy5wcm90b3R5cGUuaXNDbG9zZWRCeSA9IGZ1bmN0aW9uIChidXR0b24pIHtcclxuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7XHJcbiAgICAgICAgICAgIGlmICghYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24gPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGJ1dHRvbiBpbnN0YW5jZW9mIERpYWxvZ0J1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uID0gYnV0dG9uLmdldENsb3NlS2V5KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghXy5pc1N0cmluZyhidXR0b24pKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b24gKz0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlZF9ieSA9PT0gYnV0dG9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBEaWFsb2cucHJvdG90eXBlLmdldERPTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoX2RpYWxvZ3NbdGhpcy5pZF0udGVtcGxhdGVfaW5zdGFuY2UgJiYgKF9kaWFsb2dzW3RoaXMuaWRdLnRlbXBsYXRlX2luc3RhbmNlIGluc3RhbmNlb2YgVGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfZGlhbG9nc1t0aGlzLmlkXS50ZW1wbGF0ZV9pbnN0YW5jZS5nZXRET00oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHJldHVybiBEaWFsb2c7XHJcbn0pKTtcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY2llcyA9IFtcbiAgICAgICAgICAgICdsb2Rhc2gnLFxuICAgICAgICAgICAgJ2pxdWVyeScsXG4gICAgICAgICAgICAna2hvYWlqcycsXG4gICAgICAgICAgICAna2hvYWlqcy1wcmUtb3B0aW9ucycsXG4gICAgICAgICAgICAna2hvYWlqcy1hamF4JyxcbiAgICAgICAgICAgICcuLi9kaWFsb2ctYnV0dG9uJyxcbiAgICAgICAgICAgICcuLi9kaWFsb2cnXG4gICAgICAgIF07XG4gICAgICAgIHJlcXVpcmUoZGVwZW5kZW5jaWVzLCBmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KFxuICAgICAgICAgICAgcm9vdC5fLFxuICAgICAgICAgICAgcm9vdC5qUXVlcnkgfHwgcm9vdC4kLFxuICAgICAgICAgICAgcm9vdC5LaG9haSxcbiAgICAgICAgICAgIChyb290Lktob2FpICYmIHJvb3QuS2hvYWkuUHJlT3B0aW9ucykgfHwgcm9vdC5QcmVPcHRpb25zLFxuICAgICAgICAgICAgKHJvb3QuS2hvYWkgJiYgcm9vdC5LaG9haS5BamF4KSB8fCByb290LkFqYXgsXG4gICAgICAgICAgICAocm9vdC5LaG9haSAmJiByb290Lktob2FpLkRpYWxvZ0J1dHRvbikgfHwgcm9vdC5EaWFsb2dCdXR0b24sXG4gICAgICAgICAgICAocm9vdC5LaG9haSAmJiByb290Lktob2FpLkRpYWxvZykgfHwgcm9vdC5EaWFsb2dcbiAgICAgICAgKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uIChfLCBqUXVlcnksIEtob2FpLCBQcmVPcHRpb25zLCBBamF4LCBEaWFsb2dCdXR0b24sIERpYWxvZykge1xuICAgIC8qXG4gICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICB8IER5bmFtaWMgY29udGVudFxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfFxuICAgICB8XG4gICAgIHxcbiAgICAgfFxuICAgICAqL1xuXG4gICAgS2hvYWkudXRpbC5kZWZpbmVDb25zdGFudChEaWFsb2csIHtcbiAgICAgICAgRFlOQU1JQ19DT05URU5UX1BSRV9PUFRJT05TX05BTUU6ICdLaG9haS5EaWFsb2cuRHluYW1pY0NvbnRlbnQnXG4gICAgfSk7XG4gICAgUHJlT3B0aW9ucy5kZWZpbmUoRGlhbG9nLkRZTkFNSUNfQ09OVEVOVF9QUkVfT1BUSU9OU19OQU1FLCB7XG4gICAgICAgIGxvYWRpbmc6ICdMb2FkaW5nIGNvbnRlbnQuLi4nXG4gICAgfSk7XG5cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBjb250ZW50IGFzIGZ1bmN0aW9uIHdoaWNoIHByb3ZpZGUgZHluYW1pYyBjb250ZW50IHZpYSBBamF4LlxuICAgICAqIENoYW5nZSBkaWFsb2cncyBwZW5kaW5nIHN0YXR1cyBvbiBzdGFydCBjb21wbGV0ZSByZXF1ZXN0XG4gICAgICogRGlhbG9nIHdpbGwgZW1pdCBldmVudHM6XG4gICAgICogLSBsb2FkX2NvbnRlbnQ6IEFqYXggYmVnaW4gcmVxdWVzdFxuICAgICAqIC0gbG9hZF9jb250ZW50X2ZhaWxlZDogQWpheCBlcnJvclxuICAgICAqIC0gbG9hZF9jb250ZW50X2NvbXBsZXRlOiBBamF4IGNvbXBsZXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBamF4IG9wdGlvbnMuIERlZmF1bHQgb3B0aW9uczpcbiAgICAgKiAtIGVycm9yX2NvbnRlbnQ6IGRlZmF1bHQgZXJyb3IgY29udGVudCBpZiBBamF4IGVycm9yLiAnR2V0IGR5bmFtaWMgY29udGVudCBmYWlsZWQnXG4gICAgICogLSBsb2FkaW5nOiBkZWZhdWx0IGxvYWRpbmcgY29udGVudC4gJ0xvYWRpbmcgY29udGVudC4uLicuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgRGlhbG9nLmR5bmFtaWNDb250ZW50ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBudWxsO1xuXG4gICAgICAgIGlmIChfLmlzU3RyaW5nKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHVybDogb3B0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IFByZU9wdGlvbnMuZ2V0KERpYWxvZy5EWU5BTUlDX0NPTlRFTlRfUFJFX09QVElPTlNfTkFNRSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh1cGRhdGVfY29udGVudF9jYiwgZGlhbG9nKSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNOdWxsKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhdyA9IG5ldyBBamF4KF8ub21pdChvcHRpb25zLCAnbG9hZGluZycpKTtcblxuICAgICAgICAgICAgYXcuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gcmVzcG9uc2UgKyAnJztcbiAgICAgICAgICAgICAgICB1cGRhdGVfY29udGVudF9jYihjb250ZW50KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhdy5mYWlsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2cuZW1pdEV2ZW50KCdsb2FkX2NvbnRlbnRfZmFpbGVkJyk7XG4gICAgICAgICAgICAgICAgdXBkYXRlX2NvbnRlbnRfY2Iob3B0aW9ucy5lcnJvcl9jb250ZW50IHx8ICdHZXQgZHluYW1pYyBjb250ZW50IGZhaWxlZCcpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGF3Lm9wdGlvbignYmVmb3JlX3NlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nLmVtaXRFdmVudCgnbG9hZF9jb250ZW50Jyk7XG4gICAgICAgICAgICAgICAgZGlhbG9nLnBlbmRpbmcoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGF3LmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nLmVtaXRFdmVudCgnbG9hZF9jb250ZW50X2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgZGlhbG9nLnJlc29sdmVkKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGlhbG9nLmFkZExpc3RlbmVyKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhdy5hYm9ydCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGF3LnJlcXVlc3QoKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMubG9hZGluZztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfCBEaWFsb2cgQm94XG4gICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICB8XG4gICAgIHwgU2hvdyBvbmx5IGRpYWxvZyBib2R5LCBubyBoZWFkZXIsIG5vIGZvb3RlclxuICAgICB8XG4gICAgIHxcbiAgICAgKi9cblxuICAgIERpYWxvZy5ib3ggPSBmdW5jdGlvbiAoY29udGVudCwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoXy5pc1N0cmluZyhvcHRpb25zKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogb3B0aW9ucyArICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLmNvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgICAgIGlmICghb3B0aW9ucy50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9IF8uZGVmYXVsdHMob3B0aW9ucy50ZW1wbGF0ZSwge1xuICAgICAgICAgICAgaGFzX2Zvb3RlcjogZmFsc2UsXG4gICAgICAgICAgICBoYXNfaGVhZGVyOiBmYWxzZSxcbiAgICAgICAgICAgIGNsb3NlX21hbnVhbDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGRpYWxvZyA9IG5ldyBEaWFsb2cob3B0aW9ucyk7XG5cbiAgICAgICAgZGlhbG9nLm9wZW4oKTtcblxuICAgICAgICByZXR1cm4gZGlhbG9nO1xuICAgIH07XG5cbiAgICAvKlxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfCBEaWFsb2cgQWxlcnRcbiAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIHxcbiAgICAgfFxuICAgICB8XG4gICAgIHxcbiAgICAgKi9cblxuICAgIEtob2FpLnV0aWwuZGVmaW5lQ29uc3RhbnQoRGlhbG9nLCB7XG4gICAgICAgIERJQUxPR19BTEVSVF9QUkVfT1BUSU9OU19OQU1FOiAnS2hvYWkuRGlhbG9nLkFsZXJ0J1xuICAgIH0pO1xuICAgIFByZU9wdGlvbnMuZGVmaW5lKERpYWxvZy5ESUFMT0dfQUxFUlRfUFJFX09QVElPTlNfTkFNRSwge1xuICAgICAgICB0aXRsZTogJ0FsZXJ0JyxcbiAgICAgICAgY2xvc2VfYnV0dG9uX29wdGlvbnM6IHt9XG4gICAgfSk7XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IG9wdGlvbnMgU3RyaW5nOiB0aXRsZSwgb2JqZWN0OiBvcHRpb25zXG4gICAgICogQHJldHVybnMgeyp8RGlhbG9nfVxuICAgICAqL1xuICAgIERpYWxvZy5hbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChfLmlzU3RyaW5nKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zICsgJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBfLmV4dGVuZCh7XG4gICAgICAgICAgICB0aXRsZTogJ0FsZXJ0J1xuICAgICAgICB9LCBQcmVPcHRpb25zLmdldChEaWFsb2cuRElBTE9HX0FMRVJUX1BSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpLCB7XG4gICAgICAgICAgICBjb250ZW50OiBtZXNzYWdlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkaWFsb2cgPSBuZXcgRGlhbG9nKF8ub21pdChvcHRpb25zLCAnY2xvc2VfYnV0dG9uX29wdGlvbnMnKSk7XG5cbiAgICAgICAgZGlhbG9nLmF0dGFjaEJ1dHRvbihEaWFsb2dCdXR0b24uZmFjdG9yeShEaWFsb2dCdXR0b24uQ0xPU0UsIG9wdGlvbnMuY2xvc2VfYnV0dG9uX29wdGlvbnMpKTtcblxuICAgICAgICBkaWFsb2cub3BlbigpO1xuXG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgfTtcblxuXG4gICAgLypcbiAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIHwgRGlhbG9nIENvbmZpcm1cbiAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIHxcbiAgICAgfFxuICAgICB8XG4gICAgICovXG4gICAgS2hvYWkudXRpbC5kZWZpbmVDb25zdGFudChEaWFsb2csIHtcbiAgICAgICAgRElBTE9HX0NPTkZJUk1fUFJFX09QVElPTlNfTkFNRTogJ0tob2FpLkRpYWxvZy5Db25maXJtJ1xuICAgIH0pO1xuICAgIFByZU9wdGlvbnMuZGVmaW5lKERpYWxvZy5ESUFMT0dfQ09ORklSTV9QUkVfT1BUSU9OU19OQU1FLCB7XG4gICAgICAgIHRpdGxlOiAnQ29uZmlybScsXG4gICAgICAgIGRlZmF1bHRfYnV0dG9uOiBudWxsLFxuICAgICAgICBidXR0b25zOiBbXVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybnMgeyp8RGlhbG9nfVxuICAgICAqL1xuICAgIERpYWxvZy5jb25maXJtID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBkaWFsb2c7XG5cbiAgICAgICAgaWYgKCFfLmlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zICsgJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gXy5ub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IF8uZXh0ZW5kKFByZU9wdGlvbnMuZ2V0KERpYWxvZy5ESUFMT0dfQ09ORklSTV9QUkVfT1BUSU9OU19OQU1FLCBvcHRpb25zKSwge1xuICAgICAgICAgICAgY29udGVudDogbWVzc2FnZVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy5pc0VtcHR5KG9wdGlvbnMuYnV0dG9ucykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYnV0dG9ucyA9IERpYWxvZ0J1dHRvbi5mYWN0b3J5KERpYWxvZ0J1dHRvbi5CVVRUT05TX1lFU19OTyk7XG4gICAgICAgIH1cblxuICAgICAgICBkaWFsb2cgPSBuZXcgRGlhbG9nKF8ub21pdChvcHRpb25zLCAnZGVmYXVsdF9idXR0b24nKSk7XG5cbiAgICAgICAgXy5lYWNoKGRpYWxvZy5idXR0b25zLCBmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgICAgICAgICBidXR0b24uc2V0SGFuZGxlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5uYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuZGVmYXVsdF9idXR0b24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdF9idXR0b24gPSBfLmxhc3QoT2JqZWN0LmtleXMoZGlhbG9nLmJ1dHRvbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vRGVmYXVsdCBidXR0b25cbiAgICAgICAgZGlhbG9nLm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2xvc2VkX2J5KSB7XG4gICAgICAgICAgICAgICAgS2hvYWkudXRpbC5jYWxsRnVuYyhjYWxsYmFjaywgb3B0aW9ucy5kZWZhdWx0X2J1dHRvbiwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHRfYnV0dG9uJ1xuICAgICAgICB9KTtcblxuICAgICAgICBkaWFsb2cub3BlbigpO1xuXG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgfTtcblxuXG4gICAgLypcbiAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIHwgRGlhbG9nIGlGcmFtZVxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfFxuICAgICB8XG4gICAgIHxcbiAgICAgKi9cbiAgICBLaG9haS51dGlsLmRlZmluZUNvbnN0YW50KERpYWxvZywge1xuICAgICAgICBESUFMT0dfSUZSQU1FX1BSRV9PUFRJT05TX05BTUU6ICdLaG9haS5EaWFsb2cuaUZyYW1lJ1xuICAgIH0pO1xuICAgIFByZU9wdGlvbnMuZGVmaW5lKERpYWxvZy5ESUFMT0dfSUZSQU1FX1BSRV9PUFRJT05TX05BTUUsIHtcbiAgICAgICAgdGl0bGU6ICdpRnJhbWUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybFxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybnMgeyp8RGlhbG9nfVxuICAgICAqL1xuICAgIERpYWxvZy5pRnJhbWUgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBkaWFsb2csXG4gICAgICAgICAgICBhdHRycyA9IFtdLFxuICAgICAgICAgICAgdGVtcGxhdGUgPSBbXTtcblxuICAgICAgICBpZiAoIV8uaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMgKyAnJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IFByZU9wdGlvbnMuZ2V0KERpYWxvZy5ESUFMT0dfSUZSQU1FX1BSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpO1xuXG4gICAgICAgIF8uZWFjaChvcHRpb25zLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAgICAgaWYgKF8uaXNCb29sZWFuKHZhbCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goa2V5ICsgJz1cIicgKyBrZXkgKyAnXCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goa2V5ICsgJz1cIicgKyB2YWwgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVtcGxhdGUucHVzaCgnPGRpdiBjbGFzcz1cImVtYmVkLXJlc3BvbnNpdmUgZW1iZWQtcmVzcG9uc2l2ZS0xNmJ5OVwiPicpO1xuICAgICAgICB0ZW1wbGF0ZS5wdXNoKCc8aWZyYW1lIGNsYXNzPVwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXCIgc3JjPVwiJyArIHVybCArICdcIiAnICsgYXR0cnMuam9pbignICcpICsgJz48L2lmcmFtZT4nKTtcbiAgICAgICAgdGVtcGxhdGUucHVzaCgnPC9kaXY+Jyk7XG5cbiAgICAgICAgb3B0aW9ucy5jb250ZW50ID0gdGVtcGxhdGUuam9pbihcIlxcblwiKTtcbiAgICAgICAgZGlhbG9nID0gbmV3IERpYWxvZyhvcHRpb25zKTtcblxuICAgICAgICBkaWFsb2cub3BlbigpO1xuXG4gICAgICAgIHJldHVybiBkaWFsb2c7XG4gICAgfTtcblxuICAgIC8qXG4gICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICB8IERpYWxvZyBGb3JtXG4gICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICB8IC0gQnV0dG9uczogc3VibWl0LCBjbG9zZVxuICAgICB8IC0gT3B0aW9uczpcbiAgICAgfCAgKyBmb3JtX2NsYXNzZXM6IGZvcm0gY2xhc3Nlcywgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ1xuICAgICB8ICArIG1lc3NhZ2VfY2xhc3NlczogZm9ybSBtZXNzYWdlIGRpdiBjbGFzc2VzLCBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5nLiBEZWZhdWx0IGlzIFwiZGlhbG9nX2Zvcm1fbWVzc2FnZVwiXG4gICAgIHwgICsgYnV0dG9uczogYWRkIG90aGVyIGJ1dHRvbnNcbiAgICAgfCAgKyBidXR0b25zX29wdGlvbjogb2JqZWN0IHdpdGggYnV0dG9uJ3MgbmFtZSBhbmQgYnV0dG9uIG9wdGlvbnNcbiAgICAgfCAgKyBzdWJtaXRfYnV0dG9uOiBkZWZhdWx0IHN1Ym1pdCBidXR0b24gbmFtZS4gRGlhbG9nIHdpbGwgdHJpZ2dlciBjYWxsYmFjayB3aXRoIHRoaXMgYnV0dG9uIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0IHdpdGhvdXQgYnV0dG9uIGNsaWNrXG4gICAgIHwgICsgY2xvc2VfYnV0dG9uOiBkZWZhdWx0IGNsb3NlIGJ1dHRvbiBuYW1lLiBEaWFsb2cgd2lsbCB0cmlnZ2VyIGNhbGxiYWNrIHdpdGggZGlhbG9nIGNsb3NlIHdpdGhvdXQgYnV0dG9uIGNsaWNrXG4gICAgIHwgICsgdmFsaWRhdG9yOiBmb3JtIHZhbGlkYXRvciBjYWxsYmFjay4gUmV0dXJuIHRydWUgb24gdmFsaWQgb3Igc3RyaW5nIGZvciBlcnJvcnMuIElmIHJldHVybiBzdHJpbmcgdGhlbiBkaWFsb2cgd2lsbCBzaG93IGVycm9yIG9uIG1lc3NhZ2UgZGl2LlxuICAgICB8ICAgICAgQXJndW1lbnRzOlxuICAgICB8ICAgICAgLSBmb3JtIERPTVxuICAgICB8ICAgICAgLSBidXR0b24gaW5zdGFuY2VcbiAgICAgfCAgICAgIC0gZGlhbG9nIGluc3RhbmNlXG4gICAgIHxcbiAgICAgfFxuICAgICB8LSBEaWFsb2cgZGF0YTpcbiAgICAgfCAgKyBmb3JtX3NlbGVjdG9yOiBmb3JtIHNlbGVjdG9yXG4gICAgIHwgICsgZm9ybV9tZXNzYWdlX3NlbGVjdG9yOiBmb3JtIG1lc3NhZ2UgZGl2IHNlbGVjdG9yXG4gICAgIHwgICsgdXBkYXRlX21lc3NhZ2U6IHVwZGF0ZSBmb3JtIG1lc3NhZ2UuIEFyZ3VtZW50czogbWVzc2FnZS4gSWYgYXJnIG1lc3NhZ2UgZmFpbCB0aGVuIGhpZGUgbWVzc2FnZVxuICAgICB8ICArIGJ0bl9oYW5kbGVyOiBkZWZhdWx0IGJ1dHRvbiBjbGljayBoYW5kbGVyLCB0aGF0IHZhbGlkIGZvcm0sIHNob3cgbWVzc2FnZSBvbiBlcnJvciBhbmQgY2FsbCBjYWxsYmFjay5cbiAgICAgfCAgICAgIElmIGJ1dHRvbiBpcyBjbG9zZSBidXR0b24gdGhlbiBjbG9zZSBkaWFsb2cgYmVmb3JlIGNhbGwgY2FsbGJhY2suIFVzZWZ1bCBmb3IgY3VzdG9tIGJ1dHRvblxuICAgICB8ICAgICAgQXJndW1lbnRzOlxuICAgICB8ICAgICAgLSBidG46IGJ1dHRvbiBpbnN0YW5jZVxuICAgICB8XG4gICAgIHwtIEZvcm0gY2FsbGJhY2s6XG4gICAgIHwgICAgICBBcmd1bWVudHM6XG4gICAgIHwgICAgICAtIGJ1dHRvbiBuYW1lOlxuICAgICB8ICAgICAgLSBmb3JtIERPTTpcbiAgICAgfCAgICAgIC0gYnV0dG9uIGluc3RhbmNlOlxuICAgICB8ICAgICAgLSBkaWFsb2cgaW5zdGFuY2U6XG4gICAgIHxcbiAgICAgfFxuICAgICB8XG4gICAgIHxcbiAgICAgfFxuICAgICAqL1xuICAgIERpYWxvZ0J1dHRvbi5kZWZpbmUoJ3N1Ym1pdCcsIHtcbiAgICAgICAgbGFiZWw6ICdTdWJtaXQnXG4gICAgfSk7XG5cbiAgICBLaG9haS51dGlsLmRlZmluZUNvbnN0YW50KERpYWxvZ0J1dHRvbiwge1xuICAgICAgICBTVUJNSVQ6ICdzdWJtaXQnLFxuICAgICAgICBTVUJNSVRfQ0FOQ0VMOiBbJ3N1Ym1pdCcsICdjYW5jZWwnXVxuICAgIH0pO1xuXG4gICAgS2hvYWkudXRpbC5kZWZpbmVDb25zdGFudChEaWFsb2csIHtcbiAgICAgICAgRElBTE9HX0ZPUk1fUFJFX09QVElPTlNfTkFNRTogJ0tob2FpLkRpYWxvZy5Gb3JtJ1xuICAgIH0pO1xuICAgIFByZU9wdGlvbnMuZGVmaW5lKERpYWxvZy5ESUFMT0dfRk9STV9QUkVfT1BUSU9OU19OQU1FLCB7XG4gICAgICAgIHRpdGxlOiAnRm9ybScsXG4gICAgICAgIGZvcm1fY2xhc3NlczogJycsXG4gICAgICAgIG1lc3NhZ2VfY2xhc3NlczogJ2RpYWxvZ19mb3JtX21lc3NhZ2UnLFxuICAgICAgICB2YWxpZGF0b3I6IG51bGwsXG4gICAgICAgIGF1dG9fZm9jdXM6IHRydWUsXG4gICAgICAgIHN1Ym1pdF9idXR0b25fbmFtZTogJ3N1Ym1pdCcsXG4gICAgICAgIGNhbmNlbF9idXR0b25fbmFtZTogJ2NhbmNlbCcsXG4gICAgICAgIGJ1dHRvbnM6IFtdLFxuICAgICAgICBidXR0b25zX2V4dGVuZF9vcHRpb25zOiB7fVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKX0gY29udGVudFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGFyZ3VtZW50czogYnV0dG9uIG5hbWUsIGZvcm0gRE9NLCBidXR0b24gaW5zdGFuY2UsIGRpYWxvZyBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybnMgeyp8RGlhbG9nfVxuICAgICAqL1xuICAgIERpYWxvZy5mb3JtID0gZnVuY3Rpb24gKGNvbnRlbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBkaWFsb2cgPSBuZXcgRGlhbG9nKCk7XG5cbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IF8ubm9vcDtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gXy5leHRlbmQoUHJlT3B0aW9ucy5nZXQoRGlhbG9nLkRJQUxPR19GT1JNX1BSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpLCB7XG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgY29udGVudF9oYW5kbGVyOiBkaWFsb2dGb3JtQ29udGVudEhhbmRsZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uaXNFbXB0eShvcHRpb25zLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmJ1dHRvbnMgPSBEaWFsb2dCdXR0b24uZmFjdG9yeShEaWFsb2dCdXR0b24uU1VCTUlUX0NBTkNFTCwge30sIHtcbiAgICAgICAgICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogY3JlYXRlQ2FuY2VsQnV0dG9uSGFuZGxlcihjYWxsYmFjaylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Ym1pdDoge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyOiBjcmVhdGVCdXR0b25zSGFuZGxlcihjYWxsYmFjaywgb3B0aW9ucylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpYWxvZy5vcHRpb24oXG4gICAgICAgICAgICBfLm9taXQob3B0aW9ucywgWydmb3JtX2NsYXNzZXMnLCAnbWVzc2FnZV9jbGFzc2VzJywgJ3ZhbGlkYXRvcicsICdzdWJtaXRfYnV0dG9uX25hbWUnLFxuICAgICAgICAgICAgICAgICdjYW5jZWxfYnV0dG9uX25hbWUnLCAnYnV0dG9ucycsICdidXR0b25zX2V4dGVuZF9vcHRpb25zJ10pXG4gICAgICAgICk7XG5cbiAgICAgICAgXy5lYWNoKG9wdGlvbnMuYnV0dG9ucywgZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgdmFyIGF0dGFjaGVkX2J1dHRvbiA9IGRpYWxvZy5hdHRhY2hCdXR0b24oYnV0dG9uKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYnV0dG9uc19leHRlbmRfb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShhdHRhY2hlZF9idXR0b24ub3B0aW9ucy5uYW1lKSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaGVkX2J1dHRvbi5vcHRpb24oXy5jbG9uZShvcHRpb25zLmJ1dHRvbnNfZXh0ZW5kX29wdGlvbnNbYXR0YWNoZWRfYnV0dG9uLm9wdGlvbnMubmFtZV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWRkRGlhbG9nRGF0YShkaWFsb2csIG9wdGlvbnMpO1xuICAgICAgICBhZGREaWFsb2dNZXRob2RzKGRpYWxvZywgb3B0aW9ucyk7XG4gICAgICAgIGFkZERpYWxvZ0V2ZW50cyhkaWFsb2csIG9wdGlvbnMpO1xuXG4gICAgICAgIGRpYWxvZy5vcGVuKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYXV0b19mb2N1cykge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGlhbG9nLmdldERPTSgpLmZpbmQoJ2lucHV0OnZpc2libGUsIHRleHRhcmVhOnZpc2libGUnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRpYWxvZztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FuY2VsQnV0dG9uSGFuZGxlcihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAgICAgdmFyIGRpYWxvZyA9IGJ1dHRvbi5nZXREaWFsb2coKTtcblxuICAgICAgICAgICAgYnV0dG9uLmNsb3NlRGlhbG9nKHRydWUpO1xuICAgICAgICAgICAgS2hvYWkudXRpbC5jYWxsRnVuYyhjYWxsYmFjaywgW2J1dHRvbi5vcHRpb25zLm5hbWUsIG51bGwsIGJ1dHRvbiwgZGlhbG9nXSwgZGlhbG9nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbnNIYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgICAgICAgICB2YXIgZGlhbG9nX2luc3RhbmNlID0gdGhpcy5nZXREaWFsb2coKSxcbiAgICAgICAgICAgICAgICBmb3JtID0galF1ZXJ5KGRpYWxvZ19pbnN0YW5jZS5kYXRhWydmb3JtX3NlbGVjdG9yJ10pLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlX3Jlc3VsdCA9IHRydWU7XG5cbiAgICAgICAgICAgIHVwZGF0ZUZvcm1NZXNzYWdlKGRpYWxvZ19pbnN0YW5jZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy52YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9yZXN1bHQgPSBvcHRpb25zLnZhbGlkYXRvcihmb3JtLCBkaWFsb2dfaW5zdGFuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRydWUgIT09IHZhbGlkYXRlX3Jlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmlzU3RyaW5nKHZhbGlkYXRlX3Jlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRm9ybU1lc3NhZ2UoZGlhbG9nX2luc3RhbmNlLCB2YWxpZGF0ZV9yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS2hvYWkudXRpbC5jYWxsRnVuYyhjYWxsYmFjaywgW2J1dHRvbi5vcHRpb25zLm5hbWUsIGZvcm0sIGJ1dHRvbiwgZGlhbG9nX2luc3RhbmNlXSwgZGlhbG9nX2luc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpYWxvZ0Zvcm1Db250ZW50SGFuZGxlcihjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBbJzxmb3JtPjxkaXYgY2xhc3M9XCJkaWFsb2dfZm9ybV9tZXNzYWdlXCI+PC9kaXY+JywgY29udGVudCwgJzxpbnB1dCB0eXBlPVwic3VibWl0XCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiLz48L2Zvcm0+J10uam9pbignJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3Nlcykge1xuICAgICAgICBpZiAoIV8uaXNBcnJheShjbGFzc2VzKSkge1xuICAgICAgICAgICAgKGNsYXNzZXMgKyAnJykuc3BsaXQoJyAnKTtcbiAgICAgICAgfVxuICAgICAgICBjbGFzc2VzID0gXy5mbGF0dGVuKF8uY2FzdEFycmF5KGNsYXNzZXMpKTtcblxuICAgICAgICBpZiAoIV8uaXNFbXB0eShjbGFzc2VzKSkge1xuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKGNsYXNzZXMsIGZ1bmN0aW9uIChjbGFzc19uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzX25hbWUudHJpbSgpID8gJy4nICsgY2xhc3NfbmFtZSA6ICcnO1xuICAgICAgICAgICAgfSkuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRm9ybU1lc3NhZ2UoZGlhbG9nLCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBtZXNzYWdlX2RvbSA9IGpRdWVyeShkaWFsb2cuZGF0YVsnZm9ybV9zZWxlY3RvciddICsgJyAnICsgZGlhbG9nLmRhdGFbJ2Zvcm1fbWVzc2FnZV9zZWxlY3RvciddKTtcblxuICAgICAgICBpZiAobWVzc2FnZV9kb20ubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VfZG9tLmh0bWwobWVzc2FnZSkuc2hvdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlX2RvbS5odG1sKCcnKS5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGREaWFsb2dEYXRhKGRpYWxvZywgb3B0aW9ucykge1xuICAgICAgICB2YXIgZGlhbG9nX2RvbV9pZCA9ICcjJyArIGRpYWxvZy5nZXRUZW1wbGF0ZSgpLmdldERPTUlEKCk7XG4gICAgICAgIHZhciBmb3JtX3NlbGVjdG9yID0gZGlhbG9nX2RvbV9pZCArICcgZm9ybScgKyBjbGFzc2VzVG9TZWxlY3RvcihvcHRpb25zLmZvcm1fY2xhc3Nlcyk7XG4gICAgICAgIHZhciBmb3JtX21lc3NhZ2Vfc2VsZWN0b3IgPSBmb3JtX3NlbGVjdG9yICsgJyAnICsgb3B0aW9ucy5tZXNzYWdlX2NsYXNzZXMgPyBjbGFzc2VzVG9TZWxlY3RvcihvcHRpb25zLm1lc3NhZ2VfY2xhc3NlcykgOiAnLmRpYWxvZ19mb3JtX21lc3NhZ2UnO1xuXG4gICAgICAgIGRpYWxvZy5kYXRhWydmb3JtX3NlbGVjdG9yJ10gPSBmb3JtX3NlbGVjdG9yO1xuICAgICAgICBkaWFsb2cuZGF0YVsnZm9ybV9tZXNzYWdlX3NlbGVjdG9yJ10gPSBmb3JtX21lc3NhZ2Vfc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRGlhbG9nTWV0aG9kcyhkaWFsb2cpIHtcbiAgICAgICAgZGlhbG9nLmdldEZvcm1ET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4galF1ZXJ5KGRpYWxvZy5kYXRhWydmb3JtX3NlbGVjdG9yJ10pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGRpYWxvZy51cGRhdGVGb3JtTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICB1cGRhdGVGb3JtTWVzc2FnZShkaWFsb2csIG1lc3NhZ2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGRpYWxvZy5jbGVhckZvcm1NZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlRm9ybU1lc3NhZ2UoZGlhbG9nLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIGRpYWxvZy5nZXRGb3JtRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQFRPRE86IEZpeCBLaG9haS5qRm9ybVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIUtob2FpLmpGb3JtKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNZXRob2QgZ2V0Rm9ybURhdGEgcmVxdWlyZSBtb2R1bGUgakZvcm0nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBLaG9haS5qRm9ybS5nZXRGb3JtRGF0YSh0aGlzLmdldEZvcm1ET00oKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGREaWFsb2dFdmVudHMoZGlhbG9nLCBvcHRpb25zKSB7XG4gICAgICAgIGZ1bmN0aW9uIGZvcm1fc3VibWl0X2V2ZW50X2xpc3RlbmVyKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdWJtaXRfYnV0dG9uX25hbWUpIHtcbiAgICAgICAgICAgICAgICBkaWFsb2cuY2xpY2sob3B0aW9ucy5zdWJtaXRfYnV0dG9uX25hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBkaWFsb2cub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqUXVlcnkoJ2JvZHknKS5vbignc3VibWl0JywgdGhpcy5kYXRhWydmb3JtX3NlbGVjdG9yJ10sIGZvcm1fc3VibWl0X2V2ZW50X2xpc3RlbmVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nLm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2xvc2VkX2J5ICYmIG9wdGlvbnMuY2FuY2VsX2J1dHRvbl9uYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0J1dHRvbihvcHRpb25zLmNhbmNlbF9idXR0b25fbmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRlZmF1bHQgYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25zW29wdGlvbnMuY2FuY2VsX2J1dHRvbl9uYW1lXS5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBrZXk6ICdkZWZhdWx0X2Nsb3NlX2J1dHRvbidcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlhbG9nLm9uKCdjbG9zZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqUXVlcnkoJ2JvZHknKS5vZmYoJ3N1Ym1pdCcsIHRoaXMuZGF0YVsnZm9ybV9zZWxlY3RvciddLCBmb3JtX3N1Ym1pdF9ldmVudF9saXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLypcbiAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIHwgRGlhbG9nIFByb21wdFxuICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgfCAtIG9wdGlvbnM6XG4gICAgIHwgICAgICArIHZhbHVlOiBjdXJyZW50IHZhbHVlXG4gICAgIHwgICAgICArIGlucHV0X3R5cGU6IHRleHQsIHBhc3N3b3JkLC4uLlxuICAgICB8ICAgICAgKyBpbnB1dF9jbGFzc2VzOiBjbGFzcyBvZiBpbnB1dFxuICAgICB8XG4gICAgIHwgLSBjYWxsYmFjazogY2FsbGJhY2sgaGF2ZSAxIGFyZ3VtZW50IGlzIHZhbHVlIG9mIHByb21wdFxuICAgICB8XG4gICAgICovXG4gICAgS2hvYWkudXRpbC5kZWZpbmVDb25zdGFudChEaWFsb2csIHtcbiAgICAgICAgRElBTE9HX1BST01QVF9QUkVfT1BUSU9OU19OQU1FOiAnS2hvYWkuRGlhbG9nLnByb21wdCdcbiAgICB9KTtcbiAgICBQcmVPcHRpb25zLmRlZmluZShEaWFsb2cuRElBTE9HX1BST01QVF9QUkVfT1BUSU9OU19OQU1FLCB7XG4gICAgICAgIHRpdGxlOiAnUHJvbXB0JyxcbiAgICAgICAgZGVmYXVsdF92YWx1ZTogJycsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnJyxcbiAgICAgICAgaW5wdXRfdHlwZTogJ3RleHQnLFxuICAgICAgICBpbnB1dF9jbGFzc2VzOiAnZm9ybS1jb250cm9sJyxcbiAgICAgICAgYnV0dG9uc19leHRlbmRfb3B0aW9uczoge1xuICAgICAgICAgICAgc3VibWl0OiB7XG4gICAgICAgICAgICAgICAgbGFiZWw6ICdPaydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIERpYWxvZy5wcm9tcHQgPSBmdW5jdGlvbiAobWVzc2FnZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvbnRlbnQgPSBbXSxcbiAgICAgICAgICAgIGRpYWxvZztcblxuICAgICAgICBpZiAoIV8uaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMgKyAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIV8uaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gXy5ub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IFByZU9wdGlvbnMuZ2V0KERpYWxvZy5ESUFMT0dfUFJPTVBUX1BSRV9PUFRJT05TX05BTUUsIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnRlbnQucHVzaCgnPHA+JywgbWVzc2FnZSwgJzwvcD4nKTtcbiAgICAgICAgY29udGVudC5wdXNoKCc8aW5wdXQgbmFtZT1cInByb21wdF9kYXRhXCIgdHlwZT1cIicsIG9wdGlvbnMuaW5wdXRfdHlwZSArICdcIiAnLFxuICAgICAgICAgICAgJ2NsYXNzPVwiJywgb3B0aW9ucy5pbnB1dF9jbGFzc2VzICsgJ1wiICcsXG4gICAgICAgICAgICAndmFsdWU9XCInLCBvcHRpb25zLmRlZmF1bHRfdmFsdWUgKyAnXCInLFxuICAgICAgICAgICAgJ3BsYWNlaG9sZGVyPVwiJywgb3B0aW9ucy5wbGFjZWhvbGRlciArICdcIicsXG4gICAgICAgICAgICAnLz4nKTtcblxuICAgICAgICBmdW5jdGlvbiBwcm9tcHRfY2IoYnRuX25hbWUsIGZvcm0sIGJ0bikge1xuICAgICAgICAgICAgaWYgKCFmb3JtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9ucy5kZWZhdWx0X3ZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoJ3N1Ym1pdCcgPT09IGJ0bl9uYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmb3JtLmZpbmQoJ2lucHV0W25hbWU9XCJwcm9tcHRfZGF0YVwiXScpLnZhbCgpO1xuICAgICAgICAgICAgICAgIGJ0bi5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkaWFsb2cgPSBEaWFsb2cuZm9ybShjb250ZW50LmpvaW4oJycpLCBwcm9tcHRfY2IsIF8ub21pdChvcHRpb25zLCAnZGVmYXVsdF92YWx1ZScsICdwbGFjZWhvbGRlcicsICdpbnB1dF90eXBlJywgJ2lucHV0X2NsYXNzZXMnKSk7XG5cbiAgICAgICAgcmV0dXJuIGRpYWxvZztcbiAgICB9O1xufSkpOyJdfQ==
