!function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","khoaijs","khoaijs-event-emitter","khoaijs-pre-options","khoaijs-template"];define(n,function(n,i,o,s,a){var l=e(n,i,o,s,a);return i.DialogButton=l,t.DialogButton=l,l})}else{var i=e(t._,t.Khoai,t.Khoai.EventEmitter||t.EventEmitter,t.Khoai.PreOptions||t.PreOptions,t.Khoai.Template||t.Template);t.Khoai.DialogButton=i,t.DialogButton=i}}(this,function(t,e,n,i,o){function s(t){return t.isVisible()&&t.isEnable()&&t.getDialog().isClickable()}function a(t){t.addListener("listen",l),t.addListener("unlisten",r),t.addListener("dialog.toggle_enable",u),t.addListener("dialog.toggle_pending",p)}function l(t){d[this.id].dialog=t}function r(t){d[this.id].dialog=null}function u(t){this.toggleEnable(t)}function p(t){this.options.disable_on_pending&&this.toggleEnable(!t)}function c(t){this.type_prefix="dialog_button",n.call(this),this.options=i.get(h.PRE_OPTIONS_NAME,{name:this.id}),d[this.id]={dialog:null,enabled:!0,visible:!0,template_instance:null},this.option(this.options),t&&(t.hasOwnProperty("events")&&(this.addListeners(t.events),delete t.events),this.option(t)),a(this)}var h={PRE_OPTIONS_NAME:"Khoai.DialogButton",TEMPLATE_TYPE:"DialogButton",TYPE_INFO:"info",TYPE_PRIMARY:"primary",TYPE_SUCCESS:"success",TYPE_WARNING:"warning",TYPE_DANGER:"danger",OK:"ok",CANCEL:"cancel",YES:"yes",NO:"no",RETRY:"retry",BUTTONS_OK_ONLY:["ok"],BUTTONS_OK_CANCEL:["ok","cancel"],BUTTONS_YES_NO:["yes","no"],BUTTONS_YES_NO_CANCEL:["yes","no","cancel"],BUTTONS_RETRY_CANCEL:["retry","cancel"]},d={};i.define(h.PRE_OPTIONS_NAME,{label:"Untitled",icon:"",type:h.TYPE_INFO,size:1,handler:null,disable_on_pending:!0,clickable:s,template_name:"",template:{}}),e.util.inherit(c,n),e.util.defineConstant(c,"version","0.0.1"),e.util.defineConstant(c,h),c.globalOption=function(t){i.update(c.PRE_OPTIONS_NAME,t)},c.prototype.setTemplate=function(t){if(!(t instanceof o))throw new Error("Invalid Template instance");d[this.id].template_instance&&(d[this.id].template_instance.disconnect(),d[this.id].template_instance=null),t.option(this.options.template),d[this.id].template_instance=t,t.connect(this)},c.prototype.getTemplate=function(){if(!d[this.id].template_instance){if(!this.options.template_name){var t=i.get(c.PRE_OPTIONS_NAME);if(t.template_name&&o.hasTemplate(c.TEMPLATE_TYPE,t.template_name))this.options.template_name=t.template_name;else{var e=o.defaultTemplate(c.TEMPLATE_TYPE);if(!1===e)throw new Error("Dialog button default template not found");this.options.template_name=e,i.update(c.PRE_OPTIONS_NAME,{template_name:e})}}this.setTemplate(o.templateInstance(c.TEMPLATE_TYPE,this.options.template_name))}return d[this.id].template_instance},c.prototype.option=function(n,i){var s=e.util.beObject.apply(e,t.toArray(arguments));return s.template_name&&this.setTemplate(o.templateInstance(c.TEMPLATE_TYPE,s.template_name)),s.template&&this.getTemplate().option(s.template),t.extend(this.options,t.omit(s,["template_name"])),this},c.prototype.setHandler=function(t){this.option("handler",t)},c.prototype.getDialog=function(){return!!d[this.id].dialog&&d[this.id].dialog},c.prototype.isClickable=function(){return t.isFunction(this.options.clickable)?this.options.clickable.call(this,this):Boolean(this.options.clickable)},c.prototype.isVisible=function(){return Boolean(d[this.id].visible)},c.prototype.isEnable=function(){return Boolean(d[this.id].enabled)},c.prototype.click=function(){return!!this.isClickable()&&(this.emitEvent("click"),this.options.handler&&e.util.callFunc(this.options.handler,this,this),this.emitEvent("clicked"),!0)},c.prototype.toggle=function(e){t.isUndefined(e)&&(e=!d[this.id].visible),d[this.id].visible!==e&&(d[this.id].visible=e,e?this.emitEvent("show"):this.emitEvent("hide"),this.emitEvent("toggle",e))},c.prototype.show=function(){this.toggle(!0)},c.prototype.hide=function(){this.toggle(!1)},c.prototype.toggleEnable=function(e){t.isUndefined(e)&&(e=!d[this.id].enabled),d[this.id].enabled!==e&&(d[this.id].enabled=e,this.emitEvent(e?"enabled":"disabled"),this.emitEvent("toggle_enable",e))},c.prototype.disable=function(){this.toggleEnable(!1)},c.prototype.enable=function(){this.toggleEnable(!0)},c.prototype.render=function(){return this.getTemplate().render()},c.prototype.reDraw=function(){return!!d[this.id].template_instance&&d[this.id].template_instance.reDraw()},c.prototype.getDOM=function(){return!!(d[this.id].template_instance&&d[this.id].template_instance instanceof o)&&d[this.id].template_instance.getDOM()},c.prototype.getOtherButton=function(t){return this.getDialog().getButton(t)},c.prototype.getCloseKey=function(){return this.options.name},c.prototype.closeDialog=function(t){var e=this.getDialog();return!!e&&(e.close(t,this.getCloseKey()),!0)},c.prototype.wasCloseDialog=function(){var t=this.getDialog();return!!t&&t.setClosedBy(this)};var _={};return c.isDefined=function(t){return _.hasOwnProperty(t)},c.define=function(e,n,i){_[e]={options:t.isObject(n)?n:{},freeze_options:t.isObject(i)?i:{}},_[e].freeze_options.name=e},c.updateOptions=function(e,n){return!!c.isDefined(e)&&(t.extend(_[e].options,n),!0)},c.factory=function(e,n,i){t.isObject(n)||(n={}),t.isObject(i)||(i={});var o=t.castArray(e).map(function(e){var o,s;if(!c.isDefined(e))throw new Error("Dialog Button type is unregistered");return s=_[e],o=t.extend({},s.options,t.clone(n),i.hasOwnProperty(e)?i[e]:{},s.freeze_options),new c(o)});return 1===o.length?o.shift():o},c.defaultClickable=s,t.each(["Ok","Yes","No","Retry","Ignore"],function(t){c.define(t.toLowerCase(),{label:t})}),c.define("cancel",{label:"Cancel",disable_on_pending:!1}),function(){function t(t){t.getDialog()&&t.closeDialog(Boolean(t.options.force))}e.util.defineConstant(c,{CLOSE:"close"}),c.define(c.CLOSE,{label:"Close",type:c.TYPE_INFO,force:!1},{handler:t})}(),c}),function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","jquery","khoaijs","khoaijs-event-emitter","khoaijs-pre-options","khoaijs-template","dialog_button"];define(n,function(n,i,o,s,a,l,r){var u=e(n,i,o,s,a,l,r);return o.Dialog=u,t.Dialog=u,u})}else{var i=e(t._,t.jQuery,t.Khoai,t.Khoai&&t.Khoai.EventEmitter||t.EventEmitter,t.Khoai&&t.Khoai.PreOptions||t.PreOptions,t.Khoai&&t.Khoai.Template||t.Template,t.Khoai&&t.Khoai.DialogButton||t.DialogButton);t.Khoai.Dialog=i,t.Dialog=i}}(this,function(t,e,n,i,o,s,a){function l(t){return t.isEnable()}function r(t){return t.isEnable()}function u(t){var e={status:h.STATUS_INITIAL,enabled:!0,pending:!1,loading:!1,ajax_worker:null,template_instance:null};d.hasOwnProperty(t)&&(e.template_instance=d[t].template_instance),d[t]=e}function p(e){if(this.type_prefix="dialog",i.call(this),this.options=o.get(h.PRE_OPTIONS_NAME),this.closed_by="",this.data={},this.buttons={},u(this.id),this.option(this.options),e){if(e.hasOwnProperty("events")&&e.events&&(this.addListeners(e.events),delete e.events),e.hasOwnProperty("buttons")&&e.buttons){var n=this;t.each(e.buttons,function(t){n.attachButton(t)}),e.buttons=null,delete e.buttons}this.option(e)}}function c(e){t.isFunction(this.options.content_handler)&&(e=this.options.content_handler(e,this)),this.emitEvent("content_loaded",e),this.updateContent(e)}var h={PRE_OPTIONS_NAME:"Khoai.Dialog",TEMPLATE_TYPE:"Dialog",STATUS_INITIAL:"initial",STATUS_OPENED:"opened",STATUS_HIDING:"hiding",STATUS_CLOSED:"removed",TYPE_INFO:"info",TYPE_SUCCESS:"success",TYPE_PRIMARY:"primary",TYPE_WARNING:"warning",TYPE_DANGER:"danger",SIZE_SMALL:"small",SIZE_NORMAL:"normal",SIZE_LARGE:"large"},d={};return o.define(h.PRE_OPTIONS_NAME,{title:"Dialog",type:h.TYPE_INFO,content:"",content_handler:null,template_name:"",template:{},size:h.SIZE_NORMAL,classes:"",closable:l,clickable:r}),n.util.inherit(p,i),n.util.defineConstant(p,"version","0.0.6"),n.util.defineConstant(p,h),p.globalOption=function(t){o.update(p.PRE_OPTIONS_NAME,t)},p.prototype.getContent=function(){return t.isFunction(this.options.content)&&(this.emitEvent("load_content"),this.options.content=this.options.content(c.bind(this),this)),t.isFunction(this.options.content_handler)?this.options.content_handler(this.options.content,this):this.options.content},p.prototype.updateContent=function(t){this.options.content=t||this.options.content,t=this.getContent(),this.isOpened()&&this.emitEvent("update_content",t)},p.prototype.setTemplate=function(t){if(!this.isIniting())throw new Error("Dialog is opened");if(!(t instanceof s))throw new Error("Invalid Template instance");d[this.id].template_instance&&(d[this.id].template_instance.disconnect(),d[this.id].template_instance=null),t.option(this.options.template),d[this.id].template_instance=t,t.connect(this)},p.prototype.getTemplate=function(){if(!d[this.id].template_instance){if(!this.options.template_name){var t=o.get(p.PRE_OPTIONS_NAME);if(t.template_name&&s.hasTemplate(p.TEMPLATE_TYPE,t.template_name))this.options.template_name=t.template_name;else{var e=s.defaultTemplate(p.TEMPLATE_TYPE);if(!1===e)throw new Error("Dialog default template not found");this.options.template_name=e,o.update(p.PRE_OPTIONS_NAME,{template_name:e})}}this.setTemplate(s.templateInstance(p.TEMPLATE_TYPE,this.options.template_name))}return d[this.id].template_instance},p.prototype.option=function(e,i){var o=n.util.beObject.apply(n,t.toArray(arguments));return o.template_name&&this.setTemplate(s.templateInstance(p.TEMPLATE_TYPE,o.template_name)),o.template&&this.getTemplate().option(o.template),t.extend(this.options,o),this},p.prototype.status=function(){return!!d.hasOwnProperty(this.id)&&d[this.id].status},p.prototype.isIniting=function(){return this.status()===p.STATUS_INITIAL},p.prototype.isOpened=function(){return-1!==[p.STATUS_OPENED,p.STATUS_HIDING].indexOf(this.status())},p.prototype.isVisibling=function(){return this.status()===p.STATUS_OPENED},p.prototype.isHiding=function(){return this.status()===p.STATUS_HIDING},p.prototype.isClosed=function(){return this.status()===p.STATUS_CLOSED},p.prototype.isEnable=function(){return Boolean(d[this.id].enabled)},p.prototype.isPending=function(){return Boolean(d[this.id].pending)},p.prototype.enable=function(){return!this.isEnable()&&(d[this.id].enabled=!0,this.emitEvent("enabled"),this.emitEvent("toggle_enable",!0),!0)},p.prototype.disable=function(){return!!this.isEnable()&&(d[this.id].enabled=!1,this.emitEvent("disabled"),this.emitEvent("toggle_enable",!1),!0)},p.prototype.pending=function(){return!this.isPending()&&(d[this.id].pending=!0,this.emitEvent("pending"),this.emitEvent("toggle_pending",!0),!0)},p.prototype.resolved=function(){return!!this.isPending()&&(d[this.id].pending=!1,this.emitEvent("resolved"),this.emitEvent("toggle_pending",!1),!0)},p.prototype.attachButton=function(e){if(!(e instanceof a))if(t.isObject(e))e=new a(e);else{if(!t.isString(e)&&!t.isNumber(e)||!a.has(e))throw new Error("Invalid button");e=a.factory(e)}return this.buttons[e.options.name]=e,e.listen(this,"dialog"),e},p.prototype.attachMultiButtons=function(e){var n=this;t.each(e,function(t){n.attachButton(t)})},p.prototype.hasButton=function(t){return this.buttons.hasOwnProperty(t)},p.prototype.getButton=function(t){if(!this.hasButton(t))throw new Error("Get unattached button");return this.buttons[t]},p.prototype.removeButton=function(t){if(!this.hasButton(t))throw new Error("Remove unattached button");this.buttons[t].unlisten(this),delete this.buttons[t]},p.prototype.isClickable=function(){return!this.options.clickable||(t.isFunction(this.options.clickable)?this.options.clickable(this):Boolean(this.options.clickable))},p.prototype.click=function(t){if(this.isClickable()&&this.hasButton(t)){this.getButton(t).click(),this.emitEvent("clicked",t)}return!1},p.prototype.isCloseable=function(){return!!this.isOpened()&&(!this.options.closable||(t.isFunction(this.options.closable)?this.options.closable(this):Boolean(this.options.closable)))},p.prototype.open=function(){return this.status()===p.STATUS_INITIAL&&(d[this.id].template_instance||this.getTemplate(),this.closed_by="",d[this.id].status=p.STATUS_OPENED,this.emitEvent("open"),!0)},p.prototype.hide=function(){return!!this.isVisibling()&&(this.emitEvent("hide"),d[this.id].status=p.STATUS_HIDING,!0)},p.prototype.show=function(){return!!this.isHiding()&&(this.emitEvent("show"),d[this.id].status=p.STATUS_OPENED,!0)},p.prototype.close=function(t,e){return!(this.isClosed()||!t&&!this.isCloseable())&&(e=e||"",this.emitEvent("close",t,e),u(this.id),d[this.id].status=p.STATUS_CLOSED,this.closed_by=e,this.emitEvent("closed",t,e),this.reset(),!0)},p.prototype.setClosedBy=function(e){return!!this.isClosed()&&(e||(e=""),e instanceof a&&(e=e.getCloseKey()),t.isString(e)||(e+=""),this.closed_by=e,!0)},p.prototype.isClosedBy=function(e){return!!this.isClosed()&&(e||(e=""),e instanceof a&&(e=e.getCloseKey()),t.isString(e)||(e+=""),this.closed_by===e)},p.prototype.getDOM=function(){return!!(d[this.id].template_instance&&d[this.id].template_instance instanceof s)&&d[this.id].template_instance.getDOM()},p}),function(t,e){if("function"==typeof define&&define.amd){var n=["lodash","jquery","khoaijs","khoaijs-pre-options","khoaijs-ajax","../dialog-button","../dialog"];require(n,e)}else e(t._,t.jQuery||t.$,t.Khoai,t.Khoai&&t.Khoai.PreOptions||t.PreOptions,t.Khoai&&t.Khoai.Ajax||t.Ajax,t.Khoai&&t.Khoai.DialogButton||t.DialogButton,t.Khoai&&t.Khoai.Dialog||t.Dialog)}(this,function(t,e,n,i,o,s,a){function l(t){return function(e){var i=e.getDialog();e.closeDialog(!0),n.util.callFunc(t,[e.options.name,null,e,i],i)}}function r(i,o){return function(s){var a=this.getDialog(),l=e(a.data.form_selector),r=!0;if(c(a,!1),o.validator&&(r=o.validator(l,a)),!0!==r)return void(t.isString(r)&&c(a,r));n.util.callFunc(i,[s.options.name,l,s,a],a)}}function u(t){var e=["<form>"],n=["</form>"];return t.disableable&&(e.push('<fieldset class="form_fieldset">'),n.unshift("</fieldset>")),e.push('<div class="dialog_form_message"></div>'),n.unshift('<input type="submit" style="display: none;"/>'),function(t){return e.join("\n")+t+n.join("\n")}}function p(e){return t.isArray(e)||(e+"").split(" "),e=t.flatten(t.castArray(e)),t.isEmpty(e)?"":t.map(e,function(t){return t.trim()?"."+t:""}).join("")}function c(t,n){var i=e(t.data.form_selector+" "+t.data.form_message_selector);i.length&&(n?i.html(n).show():i.html("").hide())}function h(t,e){var n="#"+t.getTemplate().getDOMID(),i=n+" form"+p(e.form_classes),o=i+" "+e.message_classes?p(e.message_classes):".dialog_form_message";t.data.form_selector=i,t.data.form_message_selector=o}function d(t){t.getFormDOM=function(){return e(t.data.form_selector)},t.updateFormMessage=function(e){c(t,e)},t.clearFormMessage=function(){c(t,!1)},t.getFormData=function(){return n.jForm?n.jForm.getFormData(this.getFormDOM()):(console.warn("Method getFormData require module jForm"),{})}}function _(t,n){function i(e){return e.preventDefault(),n.submit_button_name&&t.click(n.submit_button_name),!1}t.on("open",function(){e("body").on("submit",this.data.form_selector,i)}),t.on("closed",function(){if(!this.closed_by&&n.cancel_button_name){if(!this.hasButton(n.cancel_button_name))throw new Error("Invalid default button");this.buttons[n.cancel_button_name].click()}},{key:"default_close_button"}),t.on("closed",function(){e("body").off("submit",this.data.form_selector,i)}),n.disableable&&t.on("toggle_enable",function(){this.getFormDOM().find("fieldset.form_fieldset").prop("disabled",!this.isEnable())})}n.util.defineConstant(a,{DYNAMIC_CONTENT_PRE_OPTIONS_NAME:"Khoai.Dialog.DynamicContent"}),i.define(a.DYNAMIC_CONTENT_PRE_OPTIONS_NAME,{loading:"Loading content..."}),a.dynamicContent=function(e){var n=null;return t.isString(e)&&(e={url:e}),e=i.get(a.DYNAMIC_CONTENT_PRE_OPTIONS_NAME,e),function(i,s){if(!t.isNull(n))return n;var a=new o(t.omit(e,"loading"));return a.done(function(t){n=t+"",i(n)}),a.fail(function(){s.emitEvent("load_content_failed"),i(e.error_content||"Get dynamic content failed")}),a.option("beforeSend",function(){return s.emitEvent("load_content"),s.pending(),!0}),a.always(function(){s.emitEvent("load_content_complete"),s.resolved()}),s.addListener("close",function(){a.abort()}),a.request(),e.loading}},a.box=function(e,n){n=n||{},t.isString(n)&&(n={title:n+""}),n.content=e,n.template||(n.template={}),n.template=t.defaults(n.template,{has_footer:!1,has_header:!1,close_manual:!1});var i=new a(n);return i.open(),i},n.util.defineConstant(a,{DIALOG_ALERT_PRE_OPTIONS_NAME:"Khoai.Dialog.Alert"}),i.define(a.DIALOG_ALERT_PRE_OPTIONS_NAME,{title:"Alert",close_button_options:{}}),a.alert=function(e,n){t.isString(n)&&(n={title:n+""}),n=t.extend({title:"Alert"},i.get(a.DIALOG_ALERT_PRE_OPTIONS_NAME,n),{content:e});var o=new a(t.omit(n,"close_button_options"));return o.attachButton(s.factory(s.CLOSE,n.close_button_options)),o.open(),o},n.util.defineConstant(a,{DIALOG_CONFIRM_PRE_OPTIONS_NAME:"Khoai.Dialog.Confirm"}),i.define(a.DIALOG_CONFIRM_PRE_OPTIONS_NAME,{title:"Confirm",default_button:null,buttons:[]}),a.confirm=function(e,o,l){var r;return t.isObject(l)||(l={title:l+""}),t.isFunction(o)||(o=t.noop),l=t.extend(i.get(a.DIALOG_CONFIRM_PRE_OPTIONS_NAME,l),{content:e}),t.isEmpty(l.buttons)&&(l.buttons=s.factory(s.BUTTONS_YES_NO)),r=new a(t.omit(l,"default_button")),t.each(r.buttons,function(t){t.setHandler(function(){this.closeDialog(),o(this.options.name)})}),l.default_button||(l.default_button=t.last(Object.keys(r.buttons))),r.on("closed",function(){this.closed_by||n.util.callFunc(o,l.default_button,null)},{key:"default_button"}),r.open(),r},n.util.defineConstant(a,{DIALOG_IFRAME_PRE_OPTIONS_NAME:"Khoai.Dialog.iFrame"}),i.define(a.DIALOG_IFRAME_PRE_OPTIONS_NAME,{title:"iFrame",attributes:{}}),a.iFrame=function(e,n){var o,s=[],l=[];return t.isObject(n)||(n={title:n+""}),n=i.get(a.DIALOG_IFRAME_PRE_OPTIONS_NAME,n),t.each(n.attributes,function(e,n){t.isBoolean(e)?e&&s.push(n+'="'+n+'"'):s.push(n+'="'+e+'"')}),l.push('<div class="embed-responsive embed-responsive-16by9">'),l.push('<iframe class="embed-responsive-item" src="'+e+'" '+s.join(" ")+"></iframe>"),l.push("</div>"),n.content=l.join("\n"),o=new a(n),o.open(),o},s.define("submit",{label:"Submit"}),n.util.defineConstant(s,{SUBMIT:"submit",SUBMIT_CANCEL:["submit","cancel"]}),n.util.defineConstant(a,{DIALOG_FORM_PRE_OPTIONS_NAME:"Khoai.Dialog.Form"}),i.define(a.DIALOG_FORM_PRE_OPTIONS_NAME,{title:"Form",form_classes:"",message_classes:"dialog_form_message",validator:null,auto_focus:!0,submit_button_name:"submit",cancel_button_name:"cancel",buttons:[],buttons_extend_options:{},disableable:!1}),a.form=function(e,n,o){var p=new a;return t.isFunction(n)||(n=t.noop),o=i.get(a.DIALOG_FORM_PRE_OPTIONS_NAME,o),o=t.extend(o,{content:e,content_handler:u(o)}),t.isEmpty(o.buttons)&&(o.buttons=s.factory(s.SUBMIT_CANCEL,{},{cancel:{handler:l(n)},submit:{handler:r(n,o)}})),p.option(t.omit(o,["form_classes","message_classes","validator","submit_button_name","cancel_button_name","buttons","buttons_extend_options","disableable"])),t.each(o.buttons,function(e){var n=p.attachButton(e);o.buttons_extend_options.hasOwnProperty(n.options.name)&&n.option(t.clone(o.buttons_extend_options[n.options.name]))}),h(p,o),d(p),_(p,o),p.open(),o.auto_focus&&setTimeout(function(){p.getDOM().find("input:visible, textarea:visible").first().focus()},500),p},n.util.defineConstant(a,{DIALOG_PROMPT_PRE_OPTIONS_NAME:"Khoai.Dialog.prompt"}),i.define(a.DIALOG_PROMPT_PRE_OPTIONS_NAME,{title:"Prompt",default_value:"",placeholder:"",input_type:"text",input_classes:"form-control",close_on_submit:!0,buttons_extend_options:{submit:{label:"Ok"}}}),a.prompt=function(e,n,o){function s(t,e,i){if(!e)return void n(!1,e,i);var s=o.default_value;"submit"===t&&(s=e.find('input[name="prompt_data"]').val(),o.close_on_submit&&i.closeDialog()),n(s,e,i)}var l=[];return t.isObject(o)||(o={title:o?o+"":"Prompt"}),t.isFunction(n)||(n=t.noop),o=i.get(a.DIALOG_PROMPT_PRE_OPTIONS_NAME,o),l.push("<p>",e,"</p>"),l.push('<input name="prompt_data" type="',o.input_type+'" ','class="',o.input_classes+'" ','value="',o.default_value+'"','placeholder="',o.placeholder+'"',"/>"),a.form(l.join(""),s,t.omit(o,"default_value","placeholder","input_type","input_classes","close_on_submit"))}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
